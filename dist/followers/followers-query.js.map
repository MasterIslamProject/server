{"version":3,"sources":["../../src/followers/followers-query.js"],"names":["bcrypt","require","makefollowersQuery","database","Object","freeze","add","verify","updateMember","updateMemberPicture","updateMemberPassword","updateMentor","updateMentorPicture","updateMentorPassword","findByMentorId","findByMemberId","findByBoth","findById","getFollowers","deleteByMentorId","deleteByMemberId","deleteByUnfollow","deleteById","update","max","before","after","db","query","_id","$lt","makeId","$gt","collection","find","limit","Number","toArray","map","documentToFollowers","followerId","followers","date","Date","toISOString","insertOne","then","result","message","status","insertedId","catch","mongoError","errorCode","split","_","mongoIndex","UniqueConstraintError","found","findOne","user_id","mem_id","mentor_id","m_id","password","follower","newSet","$set","lastname","othernames","desc","updateMany","n","image","old_password","hashSync","new_password","mentor_password","mentor_lastname","mentor_othernames","mentor_desc","mentor_image","id","updateOne","upsert","mid","memid","deleteMany","success","member_id","deleteOne","doc"],"mappings":"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","sourcesContent":["import makeFollowers from './followers'\nimport { UniqueConstraintError } from '../helpers/errors'\n\nconst bcrypt = require('bcryptjs');\n\nexport default function makefollowersQuery({database}){\n    return Object.freeze({\n        add,\n        verify,\n        updateMember,\n        updateMemberPicture,\n        updateMemberPassword,\n        updateMentor, \n        updateMentorPicture, \n        updateMentorPassword, \n        findByMentorId,\n        findByMemberId,\n        findByBoth,\n        findById,\n        getFollowers,\n        deleteByMentorId,\n        deleteByMemberId,\n        deleteByUnfollow,\n        deleteById,\n        update\n    });\n\n    async function getFollowers ({ max = 100, before, after } = {}) {\n        const db = await database;\n        const query = {}\n        if (before || after) {\n        query._id = {}\n        query._id = before ? { ...query._id, $lt: db.makeId(before) } : query._id\n        query._id = after ? { ...query._id, $gt: db.makeId(after) } : query._id\n        }\n\n        return (await db\n        .collection('Followers')\n        .find(query)\n        .limit(Number(max))\n        .toArray()).map(documentToFollowers)\n    }\n\n\n    async function add ({ followerId, ...followers }) {\n\n      let date = new Date()\n      followers.date = date.toISOString()\n\n        const db = await database\n        if (followerId) {\n          followers._id = db.makeId(followerId)\n        }\n\n        return db.collection(\"Followers\") \n          .insertOne(followers)\n          .then(result => {\n            // return {\n            //   success: result.ok === 1,\n            //   id: result.insertedId\n            //   }\n            return {\n              message: \"Success\",\n              status: result.insertedId\n            };\n        }).catch(mongoError => {\n          const [errorCode] = mongoError.message.split(' ')\n              if (errorCode === 'E11000') {\n                const [_, mongoIndex] = mongoError.message.split(':')[2].split(' ')\n                throw new UniqueConstraintError(\n                  //mongoIndex === 'ContactEmailIndex' ? 'emailAddress' : 'contactId'\n                )\n              }\n              throw mongoError\n        });\n\n    }\n\n    async function verify (followers) {\n      \n      const db = await database\n      const found = await db\n        .collection('Followers')\n        .findOne({ user_id: followers.mem_id, mentor_id: followers.m_id })\n\n      if (found) {\n        return {\n          message: \"Success\",\n          status: \"Found\"\n        };\n      }\n      else {\n          return {\n            message: \"Error\",\n            status :\"Null\"\n          }\n      }\n\n    }\n\n    async function updateMember ({ password, ...follower}) {\n      const db = await database\n      const query = {\n        password: password\n      }\n      \n      const newSet = {\n        $set : {\n          lastname: follower.lastname,\n          othernames: follower.othernames,\n          desc: follower.desc\n        } \n      }\n      /*if (id) {\n        _id = db.makeId(id)\n      }*/\n      const { result } = await db\n        .collection('Followers')\n        .updateMany(query, newSet)\n\n        return {\n          status: \"success\",\n          message: result.n+\" updated\"\n        }\n  }\n\n  async function updateMemberPicture ({ password, ...follower}) {\n    const db = await database\n\n    const query = {\n      password: password\n    }\n    \n    const newSet = {\n      $set : {\n        image: follower.image\n      } \n    }\n    const { result } = await db\n      .collection('Followers')\n      .updateMany(query, newSet)\n\n      return {\n        status: \"success\",\n        message: result.n+\" updated\"\n      }\n  }\n\n  async function updateMemberPassword ({ old_password, ...follower}) {\n    const db = await database\n\n    //oldpass = bcrypt.hashSync(old_password, 10);\n    const query = {\n      password: old_password\n    }\n    \n    // const newSet = {\n    //   $set : {\n    //     password: bcrypt.hashSync(follower.new_password, 10)\n    //   } \n    // }\n\n    const { result } = await db\n      .collection('Followers')\n      .updateMany(query, {\n        $set : {\n          password: bcrypt.hashSync(follower.new_password, 10)\n        } \n      })\n\n      return {\n        status: \"success\",\n        message: result.n+\" updated\"\n      }\n  }\n\n  async function updateMentor ({ mentor_password, ...follower}) {\n    const db = await database\n\n    const query = {\n      mentor_password: mentor_password\n    }\n    \n    const newSet = {\n      $set : {\n        mentor_lastname: follower.mentor_lastname,\n        mentor_othernames: follower.mentor_othernames,\n        mentor_desc: follower.mentor_desc\n      } \n    }\n    const { result } = await db\n      .collection('Followers') \n      .updateMany(query, newSet)\n\n      return {\n        status: \"success\",\n        message: result.n+\" updated\"\n      }\n    \n  } \n\n  async function updateMentorPicture ({ mentor_password, ...follower}) {\n    const db = await database\n\n    const query = {\n      mentor_password: mentor_password\n    }\n    \n    const newSet = {\n      $set : {\n        mentor_image: follower.mentor_image\n      } \n    }\n    const { result } = await db\n      .collection('Followers')\n      .updateMany(query, newSet)\n\n      return {\n        status: \"success\",\n        message: result.n+\" updated\"\n      }\n    \n  } \n\n  async function updateMentorPassword ({ old_password, ...follower}) {\n    const db = await database\n\n    //oldpass = bcrypt.hashSync(old_password, 10);\n    const query = {\n      mentor_password: old_password\n    }\n    \n    // const newSet = {\n    //   $set : {\n    //     mentor_password: bcrypt.hashSync(follower.new_password, 10)\n    //   } \n    // }\n\n    const { result } = await db\n      .collection('Followers')\n      .updateMany(query, {\n        $set : {\n          mentor_password: bcrypt.hashSync(follower.new_password, 10)\n        } \n      })\n\n      return {\n        status: \"success\",\n        message: result.n+\" updated\"\n      }\n  }\n\n  async function update ({ id, ...follower}) {\n      const db = await database\n      const query = {\n        _id: db.makeId(id)\n      }\n      \n      const newSet = {\n        $set : {\n          mentor_id: follower.mentor_id,\n          mentor_lastname: follower.mentor_lastname,\n          mentor_othernames: follower.mentor_othernames,\n          mentor_image: follower.mentor_image,\n          mentor_password: follower.mentor_password,\n          mentor_desc: follower.mentor_desc,\n          user_id: follower.user_id,\n          lastname: follower.lastname,\n          othernames: follower.othernames,\n          image: follower.image,\n          password: follower.password,\n          desc: follower.desc,\n          date: follower.date\n        } \n      }\n      /*if (id) {\n        _id = db.makeId(id)\n      }*/\n      const { result } = await db\n        .collection('Followers')\n        .updateOne(query, newSet, {upsert:true})\n\n        if (result) {\n          return {\n            status: \"success\",\n            message: \"Updated successfully\"\n          }\n        }\n        else {\n          return {\n            status: \"error\",\n            message: \"Error updating\"\n          }\n        }\n      \n  }\n\n  async function findById ({ id }) {\n    const db = await database\n    const found = await db\n      .collection('Followers')\n      .findOne({ _id: db.makeId(id) })\n    if (found) {\n      return documentToFollowers(found)\n    }\n    return null\n  }\n\n  async function findByMentorId ({ mid }) {\n    const db = await database;\n    \n    return (await db\n      .collection('Followers')\n      .find({ mentor_id: mid })\n      .toArray()).map(documentToFollowers)\n  }\n\n  async function findByMemberId ({ memid }) {\n    const db = await database;\n    \n    return (await db\n      .collection('Followers')\n      .find({ user_id: memid })\n      .toArray()).map(documentToFollowers)\n  }\n\n\n  async function findByBoth ({ m_id, mem_id }) {\n    \n    const db = await database\n    const found = await db\n      .collection('Followers')\n      .findOne({ user_id: mem_id, mentor_id: m_id })\n    \n\n    if (found) {\n      return {\n        message: \"Success\",\n        status: \"Found\"\n      };\n    }\n    else {\n        return {\n          message: \"Error\",\n          status :\"Null\"\n        }\n    }\n  }\n\n\n  async function deleteByMentorId ({ mentor_id }) {\n    const db = await database\n\n    const { result } = await db.collection('Followers').deleteMany({\"mentor_id\": mentor_id})\n    return {\n      success: result.n\n    }\n  }\n\n  async function deleteByMemberId ({ member_id }) {\n    const db = await database\n\n    const { result } = await db.collection('Followers').deleteMany({\"user_id\": member_id})\n    return {\n      success: result.n\n    }\n  }\n\n  async function deleteByUnfollow ({ mid, memid }) {\n    const db = await database\n\n    const { result } = await db.collection('Followers').deleteMany({\"mentor_id\": mid, \"user_id\": memid})\n    return {\n      success: result.n\n    }\n  }\n\n  async function deleteById ({ id }) {\n    const db = await database\n\n    const { result } = await db.collection('Followers').deleteOne({\"_id\": db.makeId(id)})\n    if (result.n > 0){\n      return {\n        status: \"Success\"\n      }\n    }\n    else {\n      return {\n        status: \"Error\"\n      }\n    }\n  }\n\n  function documentToFollowers ({ _id: id, ...doc }) {\n    return makeFollowers({ id, ...doc })\n  }\n}"],"file":"followers-query.js"}