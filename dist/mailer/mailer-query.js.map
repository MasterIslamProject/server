{"version":3,"sources":["../../src/mailer/mailer-query.js"],"names":["nodemailer","require","makeMailerQuery","database","Object","freeze","add","getMessages","max","before","after","db","query","_id","$lt","makeId","$gt","collection","find","limit","Number","toArray","map","documentToMailer","mailerId","mailer","result","ops","insertOne","catch","mongoError","errorCode","message","split","_","mongoIndex","UniqueConstraintError","transporter","createTransport","host","secure","port","auth","user","pass","mailerResult","sendMail","from","to","send_to","subject","topic","text","comment","send_as","html","messageId","status","id","doc"],"mappings":"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","sourcesContent":["const nodemailer = require('nodemailer');\n//const sgMail = require('@sendgrid/mail')\n\nimport makeMailer from './mailer'\nimport { UniqueConstraintError } from '../helpers/errors'\n\nexport default function makeMailerQuery({database}){\n    return Object.freeze({\n        add,\n        getMessages\n    });\n\n    async function getMessages ({ max = 200000, before, after } = {}) {\n        \n        const db = await database;\n        const query = {}\n        if (before || after) {\n        query._id = {}\n        query._id = before ? { ...query._id, $lt: db.makeId(before) } : query._id\n        query._id = after ? { ...query._id, $gt: db.makeId(after) } : query._id\n        }\n  \n        return (await db\n        .collection('Messages')\n        .find(query)\n        .limit(Number(max))\n        .toArray()).map(documentToMailer)\n      }\n   \n    async function add ({ mailerId, ...mailer }) {\n\n        const db = await database\n        if (mailerId) {\n          mailer._id = db.makeId(mailerId)\n        }\n        const { result, ops } = await db\n          .collection('Messages')\n          .insertOne(mailer)\n          .catch(mongoError => {\n            const [errorCode] = mongoError.message.split(' ')\n            if (errorCode === 'E11000') {\n              const [_, mongoIndex] = mongoError.message.split(':')[2].split(' ')\n              throw new UniqueConstraintError(\n                \n              )\n            }\n            throw mongoError\n          })\n          \n        // const transporter = nodemailer.createTransport({\n        //     service: 'gmail',\n        //     auth: {\n        //     user: 'thenaccproject@gmail.com',//'masterislamproject@gmail.com',\n        //     pass: 'uwumygrocoicpiwy', //'lxoawljozobqbmuo',\n        //     },\n        // });\n\n        let transporter = nodemailer.createTransport({\n            host: 'smtp.zoho.com',\n            secure: true,\n            port: 465,\n            auth: {\n              user: 'no-reply@masterislam.com',\n              pass: '!123Mi_contact',\n            },\n          });\n         \n         \n        const mailerResult = await transporter.sendMail({\n            from:  '\"MasterIslam\" <no-reply@masterislam.com>', // sender address\n            to: mailer.send_to, // list of receivers\n            subject: mailer.topic, // Subject line\n            text: mailer.comment+\"<br><br>\"+mailer.send_as, // plain text body\n            html: mailer.comment+\"<br><br>\"+mailer.send_as, // html body\n            });\n\n        \n        if (mailerResult.messageId == null){\n\n            return {\n                status: \"error\",\n                message: \"Mail not sent\"\n            }\n        }\n        else {\n            return {\n                status: \"success\",\n                message: \"Mail sent\"\n            }\n        }\n\n    }\n\n    function documentToMailer ({ _id: id, ...doc }) {\n        return makeMailer({ id, ...doc })\n      }\n\n}\n\n\n\n\n"],"file":"mailer-query.js"}