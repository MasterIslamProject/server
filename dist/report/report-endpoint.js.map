{"version":3,"sources":["../../src/report/report-endpoint.js"],"names":["makeReportEndpointHandler","reportQuery","handle","httpRequest","method","postReport","getReport","updateReport","deleteReport","statusCode","errorMessage","id","queryParams","report_category","reporter_id","reportee_id","max","before","after","undefined","result","findByReportCategory","headers","data","JSON","stringify","findByReporterId","findByReporteeId","findById","reportInfo","body","parse","report","e","message","UniqueConstraintError","InvalidPropertyError","RequiredParameterError","update","pathParams","deleteByReporterId","deleteByReporteeId","deleteById"],"mappings":";;;;;;;AAAA;;AAKE;;AACA;;;;AAEa,SAASA,yBAAT,CAAmC;AAACC,EAAAA;AAAD,CAAnC,EAAiD;AAC5D,SAAO,eAAeC,MAAf,CAAsBC,WAAtB,EAAkC;AACrC,YAAQA,WAAW,CAACC,MAApB;AACI,WAAK,MAAL;AACE,eAAOC,UAAU,CAACF,WAAD,CAAjB;;AAEF,WAAK,KAAL;AACE,eAAOG,SAAS,CAACH,WAAD,CAAhB;;AAEF,WAAK,KAAL;AACE,eAAOI,YAAY,CAACJ,WAAD,CAAnB;;AAEF,WAAK,QAAL;AACE,eAAOK,YAAY,CAACL,WAAD,CAAnB;;AAGF;AACE,eAAO,wBAAc;AACnBM,UAAAA,UAAU,EAAE,GADO;AAEnBC,UAAAA,YAAY,EAAG,GAAEP,WAAW,CAACC,MAAO;AAFjB,SAAd,CAAP;AAfN;AAoBH,GArBD;;AAuBA,iBAAeE,SAAf,CAA0BH,WAA1B,EAAuC;AAErC,UAAM;AAAEQ,MAAAA;AAAF,QAASR,WAAW,CAACS,WAAZ,IAA2B,EAA1C;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAsBV,WAAW,CAACS,WAAZ,IAA2B,EAAvD;AACA,UAAM;AAAEE,MAAAA;AAAF,QAAkBX,WAAW,CAACS,WAAZ,IAA2B,EAAnD;AACA,UAAM;AAAEG,MAAAA;AAAF,QAAkBZ,WAAW,CAACS,WAAZ,IAA2B,EAAnD;AACA,UAAM;AAAEI,MAAAA,GAAF;AAAOC,MAAAA,MAAP;AAAeC,MAAAA;AAAf,QAAyBf,WAAW,CAACS,WAAZ,IAA2B,EAA1D;;AAEA,QAAIC,eAAe,KAAKM,SAAxB,EAAmC;AACjC,YAAMC,MAAM,GAAG,MAAMnB,WAAW,CAACoB,oBAAZ,CAAiC;AAAER,QAAAA;AAAF,OAAjC,CAArB;AACA,aAAO;AACLS,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT,SADJ;AAILb,QAAAA,UAAU,EAAE,GAJP;AAKLc,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,MAAf;AALD,OAAP;AAQD,KAVD,MAWK,IAAIN,WAAW,KAAKK,SAApB,EAA+B;AAElC,YAAMC,MAAM,GAAG,MAAMnB,WAAW,CAACyB,gBAAZ,CAA6B;AAAEZ,QAAAA;AAAF,OAA7B,CAArB;AAEA,aAAO;AACLQ,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT,SADJ;AAILb,QAAAA,UAAU,EAAE,GAJP;AAKLc,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,MAAf;AALD,OAAP;AAQD,KAZI,MAaA,IAAIL,WAAW,KAAKI,SAApB,EAA8B;AAEjC,YAAMC,MAAM,GAAG,MAAMnB,WAAW,CAAC0B,gBAAZ,CAA6B;AAAEZ,QAAAA;AAAF,OAA7B,CAArB;AAEA,aAAO;AACLO,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT,SADJ;AAILb,QAAAA,UAAU,EAAE,GAJP;AAKLc,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,MAAf;AALD,OAAP;AAQD,KAZI,MAcA,IAAIT,EAAE,KAAKQ,SAAX,EAAsB;AACzB,YAAMC,MAAM,GAAG,MAAMnB,WAAW,CAAC2B,QAAZ,CAAqB;AAAEjB,QAAAA;AAAF,OAArB,CAArB;AACA,aAAO;AACLW,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT,SADJ;AAILb,QAAAA,UAAU,EAAE,GAJP;AAKLc,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,MAAf;AALD,OAAP;AAQD,KAVI,MAWA;AACH,YAAMA,MAAM,GAAG,MAAMnB,WAAW,CAACK,SAAZ,CAAsB;AAAEU,QAAAA,GAAF;AAAOC,QAAAA,MAAP;AAAeC,QAAAA;AAAf,OAAtB,CAArB;AAEA,aAAO;AACLI,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT,SADJ;AAILb,QAAAA,UAAU,EAAE,GAJP;AAKLc,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,MAAf;AALD,OAAP;AAQD;AAEF;;AAGD,iBAAef,UAAf,CAA2BF,WAA3B,EAAwC;AACpC,QAAI0B,UAAU,GAAG1B,WAAW,CAAC2B,IAA7B;;AACA,QAAI,CAACD,UAAL,EAAiB;AACf,aAAO,wBAAc;AACnBpB,QAAAA,UAAU,EAAE,GADO;AAEnBC,QAAAA,YAAY,EAAE;AAFK,OAAd,CAAP;AAID;;AAED,QAAI,OAAOP,WAAW,CAAC2B,IAAnB,KAA4B,QAAhC,EAA0C;AACxC,UAAI;AACFD,QAAAA,UAAU,GAAGL,IAAI,CAACO,KAAL,CAAWF,UAAX,CAAb;AACD,OAFD,CAEE,MAAM;AACN,eAAO,wBAAc;AACnBpB,UAAAA,UAAU,EAAE,GADO;AAEnBC,UAAAA,YAAY,EAAE;AAFK,SAAd,CAAP;AAID;AACF;;AAED,QAAI;AAEF,YAAMsB,MAAM,GAAG,qBAAWH,UAAX,CAAf;AACA,YAAMT,MAAM,GAAG,MAAMnB,WAAW,CAACI,UAAZ,CAAuB2B,MAAvB,CAArB;AACA,aAAO;AACLV,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT,SADJ;AAILb,QAAAA,UAAU,EAAE,GAJP;AAKLc,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,MAAf;AALD,OAAP;AAQD,KAZD,CAYE,OAAOa,CAAP,EAAU;AACV,aAAO,wBAAc;AACnBvB,QAAAA,YAAY,EAAEuB,CAAC,CAACC,OADG;AAEnBzB,QAAAA,UAAU,EACRwB,CAAC,YAAYE,6BAAb,GACI,GADJ,GAEIF,CAAC,YAAYG,4BAAb,IACAH,CAAC,YAAYI,8BADb,GAEE,GAFF,GAGE;AARW,OAAd,CAAP;AAUD;AACJ;;AAGH,iBAAe9B,YAAf,CAA6BJ,WAA7B,EAA0C;AAExC,QAAI0B,UAAU,GAAG1B,WAAW,CAAC2B,IAA7B;;AAEA,QAAI,CAACD,UAAL,EAAiB;AACf,aAAO,wBAAc;AACnBpB,QAAAA,UAAU,EAAE,GADO;AAEnBC,QAAAA,YAAY,EAAE;AAFK,OAAd,CAAP;AAID;;AAED,QAAI,OAAOP,WAAW,CAAC2B,IAAnB,KAA4B,QAAhC,EAA0C;AACxC,UAAI;AACFD,QAAAA,UAAU,GAAGL,IAAI,CAACO,KAAL,CAAWF,UAAX,CAAb;AACD,OAFD,CAEE,MAAM;AACN,eAAO,wBAAc;AACnBpB,UAAAA,UAAU,EAAE,GADO;AAEnBC,UAAAA,YAAY,EAAE;AAFK,SAAd,CAAP;AAID;AACF;;AAED,QAAI;AACF,YAAMsB,MAAM,GAAG,qBAAWH,UAAX,CAAf;AACA,YAAMT,MAAM,GAAG,MAAMnB,WAAW,CAACqC,MAAZ,CAAmBN,MAAnB,CAArB;AACA,aAAO;AACLV,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT,SADJ;AAILb,QAAAA,UAAU,EAAE,GAJP;AAKLc,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,MAAf;AALD,OAAP;AAOD,KAVD,CAUE,OAAOa,CAAP,EAAU;AACV,aAAO,wBAAc;AACnBvB,QAAAA,YAAY,EAAEuB,CAAC,CAACC,OADG;AAEnBzB,QAAAA,UAAU,EACRwB,CAAC,YAAYE,6BAAb,GACI,GADJ,GAEIF,CAAC,YAAYG,4BAAb,IACAH,CAAC,YAAYI,8BADb,GAEE,GAFF,GAGE;AARW,OAAd,CAAP;AAUD;AACF;;AAED,iBAAe7B,YAAf,CAA6BL,WAA7B,EAA0C;AACxC,UAAM;AAAEQ,MAAAA;AAAF,QAASR,WAAW,CAACoC,UAAZ,IAA0B,EAAzC;AACA,UAAM;AAAEzB,MAAAA;AAAF,QAAkBX,WAAW,CAACoC,UAAZ,IAA0B,EAAlD;AACA,UAAM;AAAExB,MAAAA;AAAF,QAAkBZ,WAAW,CAACoC,UAAZ,IAA0B,EAAlD;;AAEA,QAAIzB,WAAW,KAAKK,SAApB,EAA+B;AAC7B,UAAI;AACF,cAAMC,MAAM,GAAG,MAAMnB,WAAW,CAACuC,kBAAZ,CAA+B;AAAE1B,UAAAA;AAAF,SAA/B,CAArB;AAEA,eAAO;AACLQ,UAAAA,OAAO,EAAE;AACP,4BAAgB;AADT,WADJ;AAILb,UAAAA,UAAU,EAAE,GAJP;AAKLc,UAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,MAAf;AALD,SAAP;AAOD,OAVD,CAWA,OAAOa,CAAP,EAAS;AACP,eAAO,wBAAc;AACnBvB,UAAAA,YAAY,EAAEuB,CAAC,CAACC,OADG;AAEnBzB,UAAAA,UAAU,EACRwB,CAAC,YAAYE,6BAAb,GACI,GADJ,GAEIF,CAAC,YAAYG,4BAAb,IACAH,CAAC,YAAYI,8BADb,GAEE,GAFF,GAGE;AARW,SAAd,CAAP;AAWD;AACF,KAzBD,MA0BK,IAAItB,WAAW,KAAKI,SAApB,EAA+B;AAClC,UAAI;AACF,cAAMC,MAAM,GAAG,MAAMnB,WAAW,CAACwC,kBAAZ,CAA+B;AAAE1B,UAAAA;AAAF,SAA/B,CAArB;AAEA,eAAO;AACLO,UAAAA,OAAO,EAAE;AACP,4BAAgB;AADT,WADJ;AAILb,UAAAA,UAAU,EAAE,GAJP;AAKLc,UAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,MAAf;AALD,SAAP;AAOD,OAVD,CAWA,OAAOa,CAAP,EAAS;AACP,eAAO,wBAAc;AACnBvB,UAAAA,YAAY,EAAEuB,CAAC,CAACC,OADG;AAEnBzB,UAAAA,UAAU,EACRwB,CAAC,YAAYE,6BAAb,GACI,GADJ,GAEIF,CAAC,YAAYG,4BAAb,IACAH,CAAC,YAAYI,8BADb,GAEE,GAFF,GAGE;AARW,SAAd,CAAP;AAWD;AACF,KAzBI,MA0BA;AAEH,UAAI;AACF,cAAMjB,MAAM,GAAG,MAAMnB,WAAW,CAACyC,UAAZ,CAAuB;AAAE/B,UAAAA;AAAF,SAAvB,CAArB;AACA,eAAO;AACLW,UAAAA,OAAO,EAAE;AACP,4BAAgB;AADT,WADJ;AAILb,UAAAA,UAAU,EAAE,GAJP;AAKLc,UAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,MAAf;AALD,SAAP;AAOD,OATD,CAUA,OAAOa,CAAP,EAAS;AACP,eAAO,wBAAc;AACnBvB,UAAAA,YAAY,EAAEuB,CAAC,CAACC,OADG;AAEnBzB,UAAAA,UAAU,EACRwB,CAAC,YAAYE,6BAAb,GACI,GADJ,GAEIF,CAAC,YAAYG,4BAAb,IACAH,CAAC,YAAYI,8BADb,GAEE,GAFF,GAGE;AARW,SAAd,CAAP;AAWD;AACF;AAEF;AAEF","sourcesContent":["import {\n    UniqueConstraintError,\n    InvalidPropertyError,\n    RequiredParameterError\n  } from '../helpers/errors';\n  import makeHttpError from '../helpers/http-error';\n  import makeReport from './report';\n\nexport default function makeReportEndpointHandler({reportQuery}){\n    return async function handle(httpRequest){\n        switch (httpRequest.method) {\n            case 'POST':\n              return postReport(httpRequest)\n      \n            case 'GET':\n              return getReport(httpRequest)\n\n            case 'PUT':\n              return updateReport(httpRequest)\n      \n            case 'DELETE':\n              return deleteReport(httpRequest)\n\n\n            default:\n              return makeHttpError({\n                statusCode: 405,\n                errorMessage: `${httpRequest.method} method not allowed.`\n              })\n        }\n    }\n\n    async function getReport (httpRequest) {\n\n      const { id } = httpRequest.queryParams || {}\n      const { report_category } = httpRequest.queryParams || {} \n      const { reporter_id } = httpRequest.queryParams || {} \n      const { reportee_id } = httpRequest.queryParams || {} \n      const { max, before, after } = httpRequest.queryParams || {}\n\n      if (report_category !== undefined ){\n        const result = await reportQuery.findByReportCategory({ report_category })\n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        }\n\n      }\n      else if (reporter_id !== undefined ){\n        \n        const result = await reportQuery.findByReporterId({ reporter_id })\n\n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        }\n\n      }\n      else if (reportee_id !== undefined){\n       \n        const result = await reportQuery.findByReporteeId({ reportee_id })\n\n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        }\n\n      }\n     \n      else if (id !== undefined ){\n        const result = await reportQuery.findById({ id })\n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        }\n\n      }\n      else {\n        const result = await reportQuery.getReport({ max, before, after })\n\n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        }\n        \n      }\n        \n    }\n    \n\n    async function postReport (httpRequest) {\n        let reportInfo = httpRequest.body\n        if (!reportInfo) {\n          return makeHttpError({\n            statusCode: 400,\n            errorMessage: 'Bad request. No POST body.'\n          })\n        }\n    \n        if (typeof httpRequest.body === 'string') {\n          try {\n            reportInfo = JSON.parse(reportInfo)\n          } catch {\n            return makeHttpError({\n              statusCode: 400,\n              errorMessage: 'Bad request. POST body must be valid JSON.'\n            })\n          }\n        }\n    \n        try {\n\n          const report = makeReport(reportInfo)\n          const result = await reportQuery.postReport(report)\n          return {\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            statusCode: 201,\n            data: JSON.stringify(result)\n          }\n          \n        } catch (e) {\n          return makeHttpError({\n            errorMessage: e.message,\n            statusCode:\n              e instanceof UniqueConstraintError\n                ? 409\n                : e instanceof InvalidPropertyError ||\n                  e instanceof RequiredParameterError\n                  ? 400\n                  : 500\n          })\n        }\n    }\n\n\n  async function updateReport (httpRequest) {\n    \n    let reportInfo = httpRequest.body\n    \n    if (!reportInfo) {\n      return makeHttpError({\n        statusCode: 400,\n        errorMessage: 'Bad request. No POST body.'\n      })\n    }\n\n    if (typeof httpRequest.body === 'string') {\n      try {\n        reportInfo = JSON.parse(reportInfo)\n      } catch {\n        return makeHttpError({\n          statusCode: 400,\n          errorMessage: 'Bad request. POST body must be valid JSON.'\n        })\n      }\n    }\n\n    try {\n      const report = makeReport(reportInfo);\n      const result = await reportQuery.update(report)\n      return {\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        statusCode: 201,\n        data: JSON.stringify(result)\n      }\n    } catch (e) {\n      return makeHttpError({\n        errorMessage: e.message,\n        statusCode:\n          e instanceof UniqueConstraintError\n            ? 409\n            : e instanceof InvalidPropertyError ||\n              e instanceof RequiredParameterError\n              ? 400\n              : 500\n      })\n    }\n  }\n\n  async function deleteReport (httpRequest) {\n    const { id } = httpRequest.pathParams || {}\n    const { reporter_id } = httpRequest.pathParams || {}\n    const { reportee_id } = httpRequest.pathParams || {}\n\n    if (reporter_id !== undefined ){\n      try {\n        const result = await reportQuery.deleteByReporterId({ reporter_id })\n\n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        }\n      }\n      catch (e){\n        return makeHttpError({\n          errorMessage: e.message,\n          statusCode:\n            e instanceof UniqueConstraintError\n              ? 409\n              : e instanceof InvalidPropertyError ||\n                e instanceof RequiredParameterError\n                ? 400\n                : 500\n        })\n\n      }\n    }\n    else if (reportee_id !== undefined ){\n      try {\n        const result = await reportQuery.deleteByReporteeId({ reportee_id })\n\n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        }\n      }\n      catch (e){\n        return makeHttpError({\n          errorMessage: e.message,\n          statusCode:\n            e instanceof UniqueConstraintError\n              ? 409\n              : e instanceof InvalidPropertyError ||\n                e instanceof RequiredParameterError\n                ? 400\n                : 500\n        })\n\n      }\n    }\n    else {\n     \n      try {\n        const result = await reportQuery.deleteById({ id })\n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        }\n      }\n      catch (e){\n        return makeHttpError({\n          errorMessage: e.message,\n          statusCode:\n            e instanceof UniqueConstraintError\n              ? 409\n              : e instanceof InvalidPropertyError ||\n                e instanceof RequiredParameterError\n                ? 400\n                : 500\n        })\n\n      }\n    }\n    \n  }\n\n}"],"file":"report-endpoint.js"}