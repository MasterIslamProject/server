{"version":3,"sources":["../../src/report/report-query.js"],"names":["makeReportQuery","database","Object","freeze","postReport","findByReportCategory","findByReporterId","findByReporteeId","findById","getReport","updateReport","deleteByReporterId","deleteByReporteeId","deleteById","max","before","after","db","query","_id","$lt","makeId","$gt","collection","find","limit","Number","toArray","map","documentToReport","reportId","report","date","Date","toISOString","insertOne","then","result","message","status","insertedId","catch","mongoError","errorCode","split","_","mongoIndex","UniqueConstraintError","id","newSet","$set","reporter_id","reporter_fullname","reporter_category","reporter_email","reportee_id","reportee_fullname","reportee_category","reportee_email","report_category","comment","updateOne","upsert","found","findOne","deleteMany","success","n","deleteOne","doc"],"mappings":"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","sourcesContent":["import makeReport from './report'\nimport { UniqueConstraintError } from '../helpers/errors'\n\nexport default function makeReportQuery({database}){\n    return Object.freeze({\n        postReport,\n        findByReportCategory,\n        findByReporterId,\n        findByReporteeId,\n        findById,\n        getReport, \n        updateReport, \n        deleteByReporterId,\n        deleteByReporteeId,\n        deleteById\n    });\n\n    async function getReport ({ max = 20000, before, after } = {}) {\n        const db = await database;\n        const query = {}\n        if (before || after) {\n        query._id = {}\n        query._id = before ? { ...query._id, $lt: db.makeId(before) } : query._id\n        query._id = after ? { ...query._id, $gt: db.makeId(after) } : query._id\n        }\n\n        return (await db\n        .collection('Reports')\n        .find(query)\n        .limit(Number(max))\n        .toArray()).map(documentToReport)\n    }\n\n\n    async function postReport({ reportId, ...report }) {\n      let date = new Date()\n      report.date = date.toISOString()\n\n        const db = await database\n        if (reportId) {\n          report._id = db.makeId(reportId)\n        }\n        \n        return db.collection(\"Reports\") \n          .insertOne(report)\n          .then(result => {\n            \n            return {\n              message: \"Success\",\n              status: result.insertedId\n            };\n        }).catch(mongoError => {\n          const [errorCode] = mongoError.message.split(' ')\n              if (errorCode === 'E11000') {\n                const [_, mongoIndex] = mongoError.message.split(':')[2].split(' ')\n                throw new UniqueConstraintError(\n                  //mongoIndex === 'ContactEmailIndex' ? 'emailAddress' : 'contactId'\n                )\n              }\n              throw mongoError\n        });\n\n    }\n\n    async function updateReport ({ id, ...report}) {\n      let date = new Date()\n      report.date = date.toISOString()\n\n      const db = await database\n      const query = {\n        _id: db.makeId(id)\n      }\n      \n      const newSet = {\n        $set : {\n          reporter_id: report.reporter_id,\n          reporter_fullname: report.reporter_fullname,\n          reporter_category: report.reporter_category,\n          reporter_email: report.reporter_email,\n          reportee_id: report.reportee_id,\n          reportee_fullname: report.reportee_fullname,\n          reportee_category: report.reportee_category,\n          reportee_email: report.reportee_email,\n          report_category: report.report_category,\n          comment: report.comment,\n          date: report.date\n        } \n      }\n      /*if (id) {\n        _id = db.makeId(id)\n      }*/\n      const { result } = await db\n        .collection('Reports')\n        .updateOne(query, newSet, {upsert:true})\n\n        if (result) {\n          return {\n            status: \"success\",\n            message: \"Updated successfully\"\n          }\n        }\n        else {\n          return {\n            status: \"error\",\n            message: \"Error updating\"\n          }\n        }\n      \n    }\n\n    async function findById ({ id }) {\n      \n      const db = await database\n      const found = await db\n        .collection('Reports')\n        .findOne({ _id: db.makeId(id) })\n      if (found) {\n        return documentToReport(found)\n      }\n      return {}\n    }\n\n    async function findByReporterId({ reporter_id }) {\n      const db = await database;\n      return (await db\n        .collection('Reports')\n        .find({ reporter_id: reporter_id })\n        .toArray()).map(documentToReport)\n    }\n\n    async function findByReporteeId({ reportee_id }) {\n      const db = await database;\n      \n      return (await db\n        .collection('Reports')\n        .find({ reportee_id: reportee_id })\n        .toArray()).map(documentToReport)\n    }\n\n    async function findByReportCategory({ report_category }) {\n      const db = await database;\n      \n      return (await db\n        .collection('Reports')\n        .find({ report_category: report_category })\n        .toArray()).map(documentToReport)\n    }\n\n\n    async function deleteByReporterId ({ reporter_id }) {\n      const db = await database\n\n      const { result } = await db.collection('Reports').deleteMany({\"reporter_id\": reporter_id})\n      return {\n        success: result.n\n      }\n    }\n\n    async function deleteByReporteeId ({ reportee_id }) {\n      const db = await database\n\n      const { result } = await db.collection('Reports').deleteMany({\"reportee_id\": reportee_id})\n      return {\n        success: result.n\n      }\n    }\n\n    async function deleteById ({ id }) {\n      const db = await database\n\n      const { result } = await db.collection('Reports').deleteOne({\"_id\": db.makeId(id)})\n      if (result.n > 0){\n        return {\n          status: \"Success\"\n        }\n      }\n      else {\n        return {\n          status: \"Error\"\n        }\n      }\n    }\n\n    function documentToReport ({ _id: id, ...doc }) {\n      return makeReport({ id, ...doc })\n    }\n}"],"file":"report-query.js"}