{"version":3,"sources":["../../src/trending-react-comment/trending-react-comment-query.js"],"names":["bcrypt","require","makeTrendingReactCommentQuery","database","Object","freeze","add","updateUser","updatePicture","updatePassword","findById","findByReactId","findByCommentId","findByReactStatus","findByCommentStatus","getTrendingReactComment","deleteById","deleteByCommentId","max","before","after","db","query","_id","$lt","makeId","$gt","collection","find","sort","date","limit","Number","toArray","map","documentToTrendingReactComment","trendingReactCommentId","trendingReactComment","Date","toISOString","result","ops","insertOne","catch","mongoError","errorCode","message","split","_","mongoIndex","UniqueConstraintError","status","id","found","findOne","react_id","r_id","statux","c_id","comment_id","password","newSet","$set","lastname","othernames","updateMany","n","picture","old_password","hashSync","new_password","deleteOne","deleteMany","doc"],"mappings":"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","sourcesContent":["import makeTrendingReactComment from './trending-react-comment'\nimport { UniqueConstraintError } from '../helpers/errors'\n\nconst bcrypt = require('bcryptjs');\n\nexport default function makeTrendingReactCommentQuery({database}){\n    return Object.freeze({\n        add,\n        updateUser,\n        updatePicture,\n        updatePassword,\n        findById,\n        findByReactId,\n        findByCommentId,\n        findByReactStatus,\n        findByCommentStatus,\n        getTrendingReactComment,\n        deleteById,\n        deleteByCommentId\n    });\n\n    async function getTrendingReactComment ({ max = 100, before, after } = {}) {\n        const db = await database;\n        const query = {}\n        if (before || after) {\n        query._id = {}\n        query._id = before ? { ...query._id, $lt: db.makeId(before) } : query._id\n        query._id = after ? { ...query._id, $gt: db.makeId(after) } : query._id\n        }\n\n        return (await db\n        .collection('TrendingReactComment')\n        .find(query)\n        .sort( { date: -1 } )\n        .limit(Number(max))\n        .toArray()).map(documentToTrendingReactComment)\n    }\n\n\n    async function add ({ trendingReactCommentId, ...trendingReactComment }) {\n        let date = new Date()\n        trendingReactComment.date = date.toISOString()\n\n        const db = await database\n        if (trendingReactCommentId) {\n          trendingReactComment._id = db.makeId(trendingReactCommentId)\n        }\n        const { result, ops } = await db\n          .collection('TrendingReactComment')\n          .insertOne(trendingReactComment)\n          .catch(mongoError => {\n            const [errorCode] = mongoError.message.split(' ')\n            if (errorCode === 'E11000') {\n              const [_, mongoIndex] = mongoError.message.split(':')[2].split(' ')\n              throw new UniqueConstraintError(\n                \n              )\n            }\n            throw mongoError\n          })\n        \n        if (result){\n          return {\n            status: \"Success\",\n            message: \"Upload successful\"\n          }\n        }\n        else {\n          return {\n            status: \"Error\",\n            message: \"Upload not successful\"\n          }\n        }\n        \n    }\n    \n  async function findById ({ id }) {\n    const db = await database\n    const found = await db\n      .collection('TrendingReactComment')\n      .findOne({ _id: db.makeId(id) })\n    if (found) {\n      return documentToTrendingReactComment(found)\n    }\n    return {}\n  }\n\n  async function findByReactId({ react_id }) {\n    const db = await database;\n    \n    return (await db\n      .collection('TrendingReactComment')\n      .find({ react_id: react_id })\n      .sort( { date: -1 } )\n      .toArray()).map(documentToTrendingReactComment)\n  }\n\n  async function findByReactStatus({ r_id, statux }) {\n    const db = await database;\n    \n    return (await db\n      .collection('TrendingReactComment')\n      .find({ react_id: r_id, status: statux})\n      .sort( { date: -1 } )\n      .toArray()).map(documentToTrendingReactComment)\n  }\n\n  async function findByCommentStatus({ c_id, statux }) {\n    const db = await database;\n    \n    return (await db\n      .collection('TrendingReactComment')\n      .find({ comment_id: c_id, status: statux})\n      .sort( { date: -1 } )\n      .toArray()).map(documentToTrendingReactComment)\n  }\n\n  async function findByCommentId({ comment_id }) {\n    const db = await database;\n    return (await db\n      .collection('TrendingReactComment')\n      .find({ comment_id: comment_id })\n      .toArray()).map(documentToTrendingReactComment)\n  }\n\n  async function updateUser ({ password, ...trendingReactComment }) {\n      \n    const db = await database\n    const query = {\n      password: password\n    }\n\n    const newSet = {\n      $set : {\n        lastname: trendingReactComment.lastname,\n        othernames: trendingReactComment.othernames\n      } \n    }\n    const { result } = await db\n      .collection('TrendingReactComment')\n      .updateMany(query, newSet)\n\n      return {\n        status: \"success\",\n        message: result.n+\" updated\"\n      }\n  }\n\n  async function updatePicture ({ password, ...trendingReactComment}) {\n    const db = await database\n    \n    const query = {\n      password: password\n    }\n    \n    const newSet = {\n      $set : {\n        picture: trendingReactComment.picture\n      } \n    }\n    const { result } = await db\n      .collection('TrendingReactComment')\n      .updateMany(query, newSet)\n\n      return {\n        status: \"success\",\n        message: result.n+\" updated\"\n      }\n    \n  } \n\n  async function updatePassword ({ old_password, ...trendingReactComment}) {\n    const db = await database\n   \n    const query = {\n      password: old_password //bcrypt.hashSync(old_password, 10)\n    }\n    const newSet = {\n      $set : {\n        password: bcrypt.hashSync(trendingReactComment.new_password, 10)\n      } \n    }\n    \n    const { result } = await db\n      .collection('TrendingReactComment')\n      .updateMany(query, newSet)\n\n      return {\n        status: \"success\",\n        message: result.n+\" updated\"\n      }\n  }\n\n  async function deleteById ({ id }) {\n    const db = await database\n\n    const { result } = await db.collection('TrendingReactComment').deleteOne({\"_id\": db.makeId(id)})\n    if (result.n > 0){\n      return {\n        status: \"Success\"\n      }\n    }\n    else {\n      return {\n        status: \"Error\"\n      }\n    }\n  }\n\n  async function deleteByCommentId ({ comment_id }) {\n    const db = await database\n\n    const { result } = await db.collection('TrendingReactComment').deleteMany({\"comment_id\": comment_id})\n      return {\n        status: result.n,\n        message: \"Success\"\n      }\n    \n  }\n\n  function documentToTrendingReactComment ({ _id: id, ...doc }) {\n    return makeTrendingReactComment({ id, ...doc })\n  }\n  \n}"],"file":"trending-react-comment-query.js"}