{"version":3,"sources":["../../src/trending-react/trending-react-query.js"],"names":["makeTrendingReactQuery","database","Object","freeze","add","verify","updateMentor","updateMentorPicture","updateMentorPassword","findById","findByCategory","findByTrendingId","findByMentorId","getTrendingReact","deleteByTrendingId","deleteById","update","max","before","after","db","query","_id","$lt","makeId","$gt","collection","find","limit","Number","toArray","map","documentToTrendingReact","trendingReactId","trendingReact","date","Date","toISOString","insertOne","then","result","status","message","insertedId","catch","mongoError","errorCode","split","_","mongoIndex","UniqueConstraintError","trendingReactInfo","found","trending_id","mentor_id","count","id","newSet","$set","mentor_lastname","mentor_othernames","description","picture","category","video","type","caption","password","updateOne","upsert","updateMany","n","old_password","bcrypt","hashSync","new_password","findOne","deleteMany","success","deleteOne","doc"],"mappings":"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","sourcesContent":["import makeTrendingReact from './trending-react'\nimport { UniqueConstraintError } from '../helpers/errors'\n\nexport default function makeTrendingReactQuery({database}){\n    return Object.freeze({\n        add,\n        verify,\n        updateMentor,\n        updateMentorPicture,\n        updateMentorPassword,\n        findById,\n        findByCategory,\n        findByTrendingId,\n        findByMentorId,\n        getTrendingReact,\n        deleteByTrendingId,\n        deleteById,\n        update\n    });\n\n    async function getTrendingReact ({ max = 100, before, after } = {}) {\n        const db = await database;\n        const query = {}\n        if (before || after) {\n        query._id = {}\n        query._id = before ? { ...query._id, $lt: db.makeId(before) } : query._id\n        query._id = after ? { ...query._id, $gt: db.makeId(after) } : query._id\n        }\n\n        return (await db\n        .collection('TrendingReact')\n        .find(query)\n        .limit(Number(max))\n        .toArray()).map(documentToTrendingReact)\n    }\n\n\n    async function add ({ trendingReactId, ...trendingReact }) {\n      let date = new Date()\n      trendingReact.date = date.toISOString()\n\n      const db = await database\n      if (trendingReactId) {\n        trendingReact._id = db.makeId(trendingReactId)\n      }\n\n      return db.collection(\"TrendingReact\")\n        .insertOne(trendingReact)\n        .then(result => {\n          //console.log(result.insertedId);\n          return {\n            // success: result.ok === 1,\n            // id: result.insertedId\n            status: \"success\",\n            message: result.insertedId\n          }\n      }).catch(mongoError => {\n        const [errorCode] = mongoError.message.split(' ')\n            if (errorCode === 'E11000') {\n              const [_, mongoIndex] = mongoError.message.split(':')[2].split(' ')\n              throw new UniqueConstraintError(\n                mongoIndex === 'ContactEmailIndex' ? 'emailAddress' : 'contactId'\n              )\n            }\n            throw mongoError\n      });\n        \n    }\n\n    async function verify (trendingReactInfo) {\n      const db = await database\n\n      const found =  await db\n        .collection('TrendingReact')\n        .find({ trending_id: trendingReactInfo.trending_id, mentor_id: trendingReactInfo.mentor_id }).count()\n\n        if (found > 0) {\n          return {\n            message: \"Success\",\n            status: \"Found\"\n          };\n        }\n        else {\n          return {\n            message: \"Error\",\n            status :\"Null\"\n          }\n        }\n      \n    }\n\n  async function update ({ id, ...trendingReact }) {\n      \n      const db = await database\n      const query = {\n        _id: db.makeId(id)\n      }\n\n      const newSet = {\n        $set : {\n          trending_id: trendingReact.trending_id,\n          mentor_id: trendingReact.mentor_id,\n          mentor_lastname: trendingReact.mentor_lastname,\n          mentor_othernames: trendingReact.mentor_othernames,\n          description: trendingReact.description,\n          picture: trendingReact.picture,\n          category: trendingReact.category,\n          video: trendingReact.video,\n          type: trendingReact.type,\n          caption: trendingReact.caption,\n          password: trendingReact.password\n        } \n      }\n\n      const { result } = await db\n        .collection('TrendingReact')\n        .updateOne(query, newSet, {upsert:true})\n\n        if (result) {\n          return {\n            status: \"success\",\n            message: \"Updated successfully\"\n          }\n        }\n        else {\n          return {\n            status: \"error\",\n            message: \"Error updating\"\n          }\n        }\n      \n  }\n\n  async function updateMentor ({ password, ...trendingReact }) {\n      \n    const db = await database\n    const query = {\n      password: password\n    }\n\n    const newSet = {\n      $set : {\n        mentor_lastname: trendingReact.mentor_lastname,\n        mentor_othernames: trendingReact.mentor_othernames\n      } \n    }\n    const { result } = await db\n      .collection('TrendingReact')\n      .updateMany(query, newSet)\n\n      return {\n        status: \"success\",\n        message: result.n+\" updated\"\n      }\n    \n  }\n\n  async function updateMentorPicture ({ password, ...trendingReact }) {\n    const db = await database\n    const query = {\n      password: password\n    }\n\n    const newSet = {\n      $set : {\n        picture: trendingReact.picture\n      } \n    }\n    const { result } = await db\n      .collection('TrendingReact')\n      .updateMany(query, newSet)\n\n      return {\n        status: \"success\",\n        message: result.n+\" updated\"\n      }\n    \n  }\n\n  async function updateMentorPassword ({ old_password, ...trendingReact}) {\n    const db = await database\n\n    //oldpass = bcrypt.hashSync(old_password, 10);\n    const query = {\n      password: old_password\n    }\n    \n    // const newSet = {\n    //   $set : {\n    //     password: bcrypt.hashSync(trendingReact.new_password, 10)\n    //   } \n    // }\n    const { result } = await db\n      .collection('TrendingReact')\n      .updateMany(query, {\n        $set : {\n          password: bcrypt.hashSync(trendingReact.new_password, 10)\n        } \n      })\n\n      return {\n        status: \"success\",\n        message: result.n+\" updated\"\n      }\n  }\n\n    \n  async function findById ({ id }) {\n    \n    const db = await database\n    const found = await db\n      .collection('TrendingReact')\n      .findOne({ _id: db.makeId(id) })\n    if (found) {\n      return documentToTrendingReact(found)\n    }\n    return {}\n  }\n\n  async function findByCategory({ category }) {\n    const db = await database;\n    \n    return (await db\n      .collection('TrendingReact')\n      .find({ category: category })\n      .toArray()).map(documentToTrendingReact)\n  }\n\n  async function findByTrendingId({ trending_id }) {\n    const db = await database;\n    \n    return (await db\n      .collection('TrendingReact')\n      .find({ trending_id: trending_id })\n      .toArray()).map(documentToTrendingReact)\n  }\n\n  async function findByMentorId({ mentor_id }) {\n    const db = await database;\n    \n    return (await db\n      .collection('TrendingReact')\n      .find({ mentor_id: mentor_id })\n      .toArray()).map(documentToTrendingReact)\n  }\n\n  async function deleteByTrendingId ({ trending_id }) {\n    const db = await database\n\n    const { result } = await db.collection('TrendingReact').deleteMany({\"trending_id\": trending_id})\n    return {\n      success: result.n\n    }\n  }  \n\n\n  async function deleteById ({ id }) {\n    const db = await database\n\n    const { result } = await db.collection('TrendingReact').deleteOne({\"_id\": db.makeId(id)})\n    if (result.n > 0){\n      return {\n        status: \"Success\"\n      }\n    }\n    else {\n      return {\n        status: \"Error\"\n      }\n    }\n  }\n\n  function documentToTrendingReact ({ _id: id, ...doc }) {\n    return makeTrendingReact({ id, ...doc })\n  }\n}"],"file":"trending-react-query.js"}