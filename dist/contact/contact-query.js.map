{"version":3,"sources":["../../src/contact/contact-query.js"],"names":["makeContactQuery","database","Object","freeze","add","findById","getContact","deleteById","max","before","after","db","query","_id","$lt","makeId","$gt","collection","find","limit","Number","toArray","map","documentToContact","contactId","contact","contact_id","result","ops","insertOne","catch","mongoError","errorCode","message","split","_","mongoIndex","UniqueConstraintError","status","id","found","findOne","deleteOne","n","doc"],"mappings":"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","sourcesContent":["import makeContact from './contact'\nimport { UniqueConstraintError } from '../helpers/errors'\n\nexport default function makeContactQuery({database}){\n    return Object.freeze({\n        add,\n        findById,\n        getContact,\n        deleteById\n    });\n\n    async function getContact ({ max = 100, before, after } = {}) {\n      \n        const db = await database;\n        const query = {};\n        if (before || after) {\n            query._id = {}\n            query._id = before ? { ...query._id, $lt: db.makeId(before) } : query._id\n            query._id = after ? { ...query._id, $gt: db.makeId(after) } : query._id\n        }\n\n        return (await db\n        .collection('Contact')\n        .find(query)\n        .limit(Number(max))\n        .toArray()).map(documentToContact)\n    }\n\n\n    async function add ({ contactId, ...contact }) {\n      \n        const db = await database\n        if (contactId) {\n          contact_id = db.makeId(contactId)\n        }\n        const { result, ops } = await db\n          .collection('Contact')\n          .insertOne(contact)\n          .catch(mongoError => {\n            const [errorCode] = mongoError.message.split(' ')\n            if (errorCode === 'E11000') {\n              const [_, mongoIndex] = mongoError.message.split(':')[2].split(' ')\n              throw new UniqueConstraintError(\n                mongoIndex === 'ContactEmailIndex' ? 'emailAddress' : 'contactId'\n              )\n            }\n            throw mongoError\n          })\n\n        if (result){\n          return {\n            status: \"Success\",\n            message: \"Upload successful\"\n          }\n        }\n        else {\n          return {\n            status: \"Error\",\n            message: \"Upload not successful\"\n          }\n        }\n        // return {\n        //     success: result.ok === 1,\n        //     created: documentToContact(ops[0])\n        // }\n    } \n\n    async function findById ({ id }) {\n     \n      const db = await database\n      const found = await db\n        .collection('Contact')\n        .findOne({ _id: db.makeId(id) })\n      if (found) {\n        return documentToContact(found)\n      }\n      return {}\n    }\n\n\n    async function deleteById ({ id }) {\n      const db = await database\n\n      const { result } = await db.collection('Contact').deleteOne({\"_id\": db.makeId(id)})\n      \n      if (result.n > 0){\n        return {\n          status: \"Success\"\n        }\n      }\n      else {\n        return {\n          status: \"Error\"\n        }\n      }\n    }\n \n  \n\n    function documentToContact ({ _id: id, ...doc }) {\n        return makeContact({ id, ...doc })\n    }\n}"],"file":"contact-query.js"}