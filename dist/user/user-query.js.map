{"version":3,"sources":["../../src/user/user-query.js"],"names":["require","config","jwt","bcrypt","makeUserQuery","database","Object","freeze","add","getUser","findById","findByEmail","findByCategory","auth","reset","verify","resetPassword","deleteById","max","before","after","db","query","_id","$lt","makeId","$gt","collection","find","limit","Number","toArray","map","documentToUser","userId","user","password","hashSync","found","findOne","email","status","message","result","ops","insertOne","catch","mongoError","errorCode","split","_","mongoIndex","UniqueConstraintError","toLowerCase","token","authUser","statusMsg","passwordValid","compare","sign","process","env","JWT_SECRET","id","lastname","othernames","location","gender","image","category","category_desc","bio","date","n_query","oldpass","newpass","inp_pass","passa","newSet","$set","updateOne","upsert","deleteOne","n","doc"],"mappings":"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","sourcesContent":["require('dotenv').config();\nimport makeUser from './user'\nimport { UniqueConstraintError } from '../helpers/errors'\n\nconst jwt = require('jsonwebtoken');\nconst bcrypt = require('bcryptjs');\n\nexport default function makeUserQuery({database}){\n    return Object.freeze({\n        add,\n        getUser,\n        findById,\n        findByEmail,\n        findByCategory,\n        auth,\n        reset,\n        verify,\n        resetPassword,\n        deleteById\n    });\n\n    async function getUser ({ max = 100, before, after } = {}) {\n      \n      const db = await database;\n      const query = {}\n      if (before || after) {\n      query._id = {}\n      query._id = before ? { ...query._id, $lt: db.makeId(before) } : query._id\n      query._id = after ? { ...query._id, $gt: db.makeId(after) } : query._id\n      }\n\n      return (await db\n      .collection('Users')\n      .find(query)\n      .limit(Number(max))\n      .toArray()).map(documentToUser)\n    }\n\n    async function add ({ userId, ...user}) {\n        const db = await database\n        if (userId) {\n          user._id = db.makeId(userId)\n        }\n       \n        user.password = bcrypt.hashSync(user.password, 10);\n        const found = await db\n          .collection('Users')\n          .findOne({ email: user.email })\n\n        if (found) {\n          return {\n            status: \"Error\",\n            message: \"Email already exist\"\n          };\n        }\n\n        const { result, ops } = await db\n          .collection('Users')\n          .insertOne(user)\n          .catch(mongoError => {\n            const [errorCode] = mongoError.message.split(' ')\n            if (errorCode === 'E11000') {\n              const [_, mongoIndex] = mongoError.message.split(':')[2].split(' ')\n              throw new UniqueConstraintError(\n                mongoIndex === 'ContactEmailIndex' ? 'emailAddress' : 'contactId'\n              )\n            }\n            throw mongoError\n          })\n        return {\n          status: \"Success\",\n          message: \"Successfully added\"\n        }\n    }\n\n    async function auth ({ email, password }) {\n\n        email = email.toLowerCase()\n        const db = await database\n        const found = await db\n          .collection('Users')   \n          .findOne({ email: email })\n\n        if (found) { \n\n          if(found.status == \"Suspended\"){\n            return {\n              token: \"Nil\",\n              authUser: {},\n              statusMsg: \"Account Suspended\"\n            };\n          }\n          else {\n            const passwordValid = await bcrypt.compare(password, found.password);\n            \n            if (passwordValid){\n               \n                const token = jwt.sign({ email: email }, process.env.JWT_SECRET, {\n                    // expiresIn: '900000d'\n                });\n                return {\n                    token: token,\n                    statusMsg: \"Login Successful\",\n                    authUser: {\n                      id: found._id,\n                      lastname: found.lastname,\n                      othernames: found.othernames,\n                      email: found.email,\n                      location: found.location,\n                      gender: found.gender,\n                      token: found.token,\n                      image: found.image,\n                      category: found.category,\n                      category_desc: found.category_desc,\n                      password: found.password,\n                      bio: found.bio,\n                      date: found.date,\n                      status: found.status,\n                      n_query: found.n_query\n                    }\n                };\n            }\n            else {\n                return {\n                    token: \"Nil\",\n                    authUser: {},\n                    statusMsg: \"Password not match\"\n                };\n            }\n          }\n            \n        }\n        else {\n            return {\n                token: \"Nil\",\n                authUser: {},\n                statusMsg: \"Email not found\"\n            }\n            \n        }\n    }\n\n    async function verify ({ oldpass, newpass }) {\n      \n      const inp_pass = bcrypt.hashSync(newpass, 10);\n      const passwordValid = await bcrypt.compare(newpass, oldpass);\n\n      if (passwordValid) {\n        return {\n          message: \"Success\",\n          status: \"Found\"\n        };\n      }\n      else {\n        return {\n          message: \"Error\",\n          status: \"Missing\"\n        }\n      }\n\n    }\n\n    async function resetPassword ({ id, ...user }) {\n      \n        const passa = bcrypt.hashSync(user.password, 10);\n        const db = await database\n        const query = {\n          _id: db.makeId(id)\n        }\n\n        const newSet = {\n          $set : {\n            lastname: user.lastname,\n            othernames: user.othernames,\n            email: user.email,\n            location: user.location,\n            gender: user.gender,\n            token: user.token,\n            image: user.image,\n            category: user.category,\n            category_desc: user.category_desc,\n            password: bcrypt.hashSync(user.password, 10),\n            bio: user.bio,\n            date: user.date,\n            status: user.status,\n            n_query: user.n_query\n          } \n        }\n        /*if (id) {\n          _id = db.makeId(id)\n        }*/\n        const { result } = await db\n          .collection('Users')\n          .updateOne(query, newSet, {upsert:true})\n          \n\n          if (result) {\n            return {\n              status: \"success\",\n              message: passa //return the crypted password as message \n            }\n          }\n          else {\n            return {\n              status: \"error\",\n              message: \"Error updating\"\n            }\n          }\n        \n    }\n\n    async function reset ({ id, ...user }) {\n      const db = await database\n      const query = {\n        _id: db.makeId(id)\n      }\n     \n      const newSet = {\n        $set : {\n          lastname: user.lastname,\n          othernames: user.othernames,\n          email: user.email,\n          location: user.location,\n          gender: user.gender,\n          token: user.token,\n          image: user.image,\n          category: user.category,\n          category_desc: user.category_desc,\n          password: user.password,\n          bio: user.bio,\n          date: user.date,\n          status: user.status,\n          n_query: user.n_query\n        } \n      }\n      /*if (id) {\n        _id = db.makeId(id)\n      }*/\n      const { result } = await db\n        .collection('Users')\n        .updateOne(query, newSet, {upsert:true})\n        \n\n        if (result) {\n          return {\n            status: \"success\",\n            message: \"Reset successfully\"\n          }\n        }\n        else {\n          return {\n            status: \"error\",\n            message: \"Error updating\"\n          }\n        }\n      \n    }\n\n\n    async function findById ({ id }) {\n      const db = await database\n      const found = await db\n        .collection('Users')\n        .findOne({ _id: db.makeId(id) })\n      if (found) {\n        return documentToUser(found)\n      }\n      return null\n    }\n\n  async function findByEmail ({ email }) {\n    const db = await database\n    const found = await db\n      .collection('Users')\n      .findOne({ email: email })\n    if (found) {\n      return documentToUser(found)\n    }\n    return {}\n  }\n\n  async function findByCategory ({ category }) {\n    const db = await database;\n\n        return (await db\n        .collection('Users')\n        .find({category: category})\n        .toArray()).map(documentToUser)\n\n  }\n\n\n  async function deleteById ({ id }) {\n    const db = await database\n\n    const { result } = await db.collection('Users').deleteOne({\"_id\": db.makeId(id)})\n    if (result.n > 0){\n      return {\n        status: \"Success\"\n      }\n    }\n    else {\n      return {\n        status: \"Error\"\n      }\n    }\n  }\n\n  function documentToUser ({ _id: id, ...doc }) {\n    return makeUser({ id, ...doc })\n  }\n}"],"file":"user-query.js"}