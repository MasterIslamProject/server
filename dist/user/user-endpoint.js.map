{"version":3,"sources":["../../src/user/user-endpoint.js"],"names":["makeUserEndpointHandler","userQuery","handle","httpRequest","method","postUser","getUser","deleteUser","statusCode","errorMessage","id","queryParams","email","category","max","before","after","undefined","result","findByEmail","headers","data","JSON","stringify","findByCategory","findById","userInfo","body","parse","path","user","auth","verify","reset","resetPassword","add","e","message","UniqueConstraintError","InvalidPropertyError","RequiredParameterError","pathParams","deleteById"],"mappings":";;;;;;;AAAA;;AAKE;;AACA;;;;AAEa,SAASA,uBAAT,CAAiC;AAACC,EAAAA;AAAD,CAAjC,EAA6C;AACxD,SAAO,eAAeC,MAAf,CAAsBC,WAAtB,EAAkC;AACrC,YAAQA,WAAW,CAACC,MAApB;AACI,WAAK,MAAL;AACE,eAAOC,QAAQ,CAACF,WAAD,CAAf;;AAEF,WAAK,KAAL;AACE,eAAOG,OAAO,CAACH,WAAD,CAAd;;AAEF,WAAK,QAAL;AACE,eAAOI,UAAU,CAACJ,WAAD,CAAjB;;AAEF;AACE,eAAO,wBAAc;AACnBK,UAAAA,UAAU,EAAE,GADO;AAEnBC,UAAAA,YAAY,EAAG,GAAEN,WAAW,CAACC,MAAO;AAFjB,SAAd,CAAP;AAXN;AAgBH,GAjBD;;AAmBA,iBAAeE,OAAf,CAAwBH,WAAxB,EAAqC;AAEnC,UAAM;AAAEO,MAAAA;AAAF,QAASP,WAAW,CAACQ,WAAZ,IAA2B,EAA1C;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAYT,WAAW,CAACQ,WAAZ,IAA2B,EAA7C;AACA,UAAM;AAAEE,MAAAA;AAAF,QAAeV,WAAW,CAACQ,WAAZ,IAA2B,EAAhD;AACA,UAAM;AAAEG,MAAAA,GAAF;AAAOC,MAAAA,MAAP;AAAeC,MAAAA;AAAf,QAAyBb,WAAW,CAACQ,WAAZ,IAA2B,EAA1D;;AAEA,QAAIC,KAAK,KAAKK,SAAd,EAAwB;AACtB,YAAMC,MAAM,GAAG,MAAMjB,SAAS,CAACkB,WAAV,CAAsB;AAAEP,QAAAA;AAAF,OAAtB,CAArB;AAEA,aAAO;AACLQ,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT,SADJ;AAILZ,QAAAA,UAAU,EAAE,GAJP;AAKLa,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,MAAf;AALD,OAAP;AAQD,KAXD,MAYK,IAAIL,QAAQ,KAAKI,SAAjB,EAA2B;AAC9B,YAAMC,MAAM,GAAG,MAAMjB,SAAS,CAACuB,cAAV,CAAyB;AAAEX,QAAAA;AAAF,OAAzB,CAArB;AAEA,aAAO;AACLO,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT,SADJ;AAILZ,QAAAA,UAAU,EAAE,GAJP;AAKLa,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,MAAf;AALD,OAAP;AAQD,KAXI,MAYA,IAAIR,EAAE,KAAKO,SAAX,EAAsB;AACzB,YAAMC,MAAM,GAAG,MAAMjB,SAAS,CAACwB,QAAV,CAAmB;AAAEf,QAAAA;AAAF,OAAnB,CAArB;AAEA,aAAO;AACLU,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT,SADJ;AAILZ,QAAAA,UAAU,EAAE,GAJP;AAKLa,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,MAAf;AALD,OAAP;AAQD,KAXI,MAYA;AACH,YAAMA,MAAM,GAAG,MAAMjB,SAAS,CAACK,OAAV,CAAkB;AAAEQ,QAAAA,GAAF;AAAOC,QAAAA,MAAP;AAAeC,QAAAA;AAAf,OAAlB,CAArB;AAEA,aAAO;AACLI,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT,SADJ;AAILZ,QAAAA,UAAU,EAAE,GAJP;AAKLa,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,MAAf;AALD,OAAP;AAQD;AAEF;;AAED,iBAAeb,QAAf,CAAyBF,WAAzB,EAAsC;AAElC,QAAIuB,QAAQ,GAAGvB,WAAW,CAACwB,IAA3B;;AACA,QAAI,CAACD,QAAL,EAAe;AACb,aAAO,wBAAc;AACnBlB,QAAAA,UAAU,EAAE,GADO;AAEnBC,QAAAA,YAAY,EAAE;AAFK,OAAd,CAAP;AAID;;AAED,QAAI,OAAON,WAAW,CAACwB,IAAnB,KAA4B,QAAhC,EAA0C;AACxC,UAAI;AACFD,QAAAA,QAAQ,GAAGJ,IAAI,CAACM,KAAL,CAAWF,QAAX,CAAX;AACD,OAFD,CAEE,MAAM;AACN,eAAO,wBAAc;AACnBlB,UAAAA,UAAU,EAAE,GADO;AAEnBC,UAAAA,YAAY,EAAE;AAFK,SAAd,CAAP;AAID;AACF;;AAED,QAAI;AAEF,UAAIN,WAAW,CAAC0B,IAAZ,IAAoB,YAAxB,EAAqC;AAEnC,cAAMC,IAAI,GAAG,mBAASJ,QAAT,CAAb;AACA,cAAMR,MAAM,GAAG,MAAMjB,SAAS,CAAC8B,IAAV,CAAeD,IAAf,CAArB;AACA,eAAO;AACHV,UAAAA,OAAO,EAAE;AACP,4BAAgB;AADT,WADN;AAIHZ,UAAAA,UAAU,EAAE,GAJT;AAKHa,UAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,MAAf;AALH,SAAP;AAOD,OAXD,MAYK,IAAIf,WAAW,CAAC0B,IAAZ,IAAoB,cAAxB,EAAuC;AAC1C,cAAMX,MAAM,GAAG,MAAMjB,SAAS,CAAC+B,MAAV,CAAiBN,QAAjB,CAArB;AACA,eAAO;AACHN,UAAAA,OAAO,EAAE;AACP,4BAAgB;AADT,WADN;AAIHZ,UAAAA,UAAU,EAAE,GAJT;AAKHa,UAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,MAAf;AALH,SAAP;AAOD,OATI,MAUA,IAAIf,WAAW,CAAC0B,IAAZ,IAAoB,aAAxB,EAAsC;AACzC,cAAMC,IAAI,GAAG,mBAASJ,QAAT,CAAb;AACA,cAAMR,MAAM,GAAG,MAAMjB,SAAS,CAACgC,KAAV,CAAgBH,IAAhB,CAArB;AAEA,eAAO;AACHV,UAAAA,OAAO,EAAE;AACP,4BAAgB;AADT,WADN;AAIHZ,UAAAA,UAAU,EAAE,GAJT;AAKHa,UAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,MAAf;AALH,SAAP;AAOD,OAXI,MAaA,IAAIf,WAAW,CAAC0B,IAAZ,IAAoB,sBAAxB,EAA+C;AAClD,cAAMC,IAAI,GAAG,mBAASJ,QAAT,CAAb;AACA,cAAMR,MAAM,GAAG,MAAMjB,SAAS,CAACiC,aAAV,CAAwBJ,IAAxB,CAArB;AAEA,eAAO;AACLV,UAAAA,OAAO,EAAE;AACP,4BAAgB;AADT,WADJ;AAILZ,UAAAA,UAAU,EAAE,GAJP;AAKLa,UAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,MAAf;AALD,SAAP;AAOD,OAXI,MAYA;AACH,cAAMY,IAAI,GAAG,mBAASJ,QAAT,CAAb;AACA,cAAMR,MAAM,GAAG,MAAMjB,SAAS,CAACkC,GAAV,CAAcL,IAAd,CAArB;AACA,eAAO;AACHV,UAAAA,OAAO,EAAE;AACP,4BAAgB;AADT,WADN;AAIHZ,UAAAA,UAAU,EAAE,GAJT;AAKHa,UAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,MAAf;AALH,SAAP;AAOD;AAGF,KA9DD,CA8DE,OAAOkB,CAAP,EAAU;AACV,aAAO,wBAAc;AACnB3B,QAAAA,YAAY,EAAE2B,CAAC,CAACC,OADG;AAEnB7B,QAAAA,UAAU,EACR4B,CAAC,YAAYE,6BAAb,GACI,GADJ,GAEIF,CAAC,YAAYG,4BAAb,IACAH,CAAC,YAAYI,8BADb,GAEE,GAFF,GAGE;AARW,OAAd,CAAP;AAUD;AACJ;;AAED,iBAAejC,UAAf,CAA2BJ,WAA3B,EAAwC;AACtC;AACA,UAAM;AAAEO,MAAAA;AAAF,QAASP,WAAW,CAACsC,UAAZ,IAA0B,EAAzC;;AACA,QAAI;AACF,YAAMvB,MAAM,GAAG,MAAMjB,SAAS,CAACyC,UAAV,CAAqB;AAAEhC,QAAAA;AAAF,OAArB,CAArB;AAEA,aAAO;AACLU,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT,SADJ;AAILZ,QAAAA,UAAU,EAAE,GAJP;AAKLa,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,MAAf;AALD,OAAP;AAOD,KAVD,CAWA,OAAOkB,CAAP,EAAS;AACP,aAAO,wBAAc;AACnB3B,QAAAA,YAAY,EAAE2B,CAAC,CAACC,OADG;AAEnB7B,QAAAA,UAAU,EACR4B,CAAC,YAAYE,6BAAb,GACI,GADJ,GAEIF,CAAC,YAAYG,4BAAb,IACAH,CAAC,YAAYI,8BADb,GAEE,GAFF,GAGE;AARW,OAAd,CAAP;AAWD;AAEF;AAEJ","sourcesContent":["import {\n    UniqueConstraintError,\n    InvalidPropertyError,\n    RequiredParameterError\n  } from '../helpers/errors';\n  import makeHttpError from '../helpers/http-error';\n  import makeUser from './user';\n\nexport default function makeUserEndpointHandler({userQuery}){\n    return async function handle(httpRequest){\n        switch (httpRequest.method) {\n            case 'POST':\n              return postUser(httpRequest)\n      \n            case 'GET':\n              return getUser(httpRequest)\n          \n            case 'DELETE':\n              return deleteUser(httpRequest)\n\n            default:\n              return makeHttpError({\n                statusCode: 405,\n                errorMessage: `${httpRequest.method} method not allowed.`\n              })\n        }\n    }\n\n    async function getUser (httpRequest) {\n\n      const { id } = httpRequest.queryParams || {}\n      const { email } = httpRequest.queryParams || {}\n      const { category } = httpRequest.queryParams || {}\n      const { max, before, after } = httpRequest.queryParams || {}\n\n      if (email !== undefined){\n        const result = await userQuery.findByEmail({ email })\n\n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        }\n\n      }\n      else if (category !== undefined){\n        const result = await userQuery.findByCategory({ category })\n\n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        }\n\n      }\n      else if (id !== undefined ){\n        const result = await userQuery.findById({ id })\n\n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        }\n\n      }\n      else {\n        const result = await userQuery.getUser({ max, before, after })\n\n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        }\n        \n      }\n\n    }\n\n    async function postUser (httpRequest) {\n      \n        let userInfo = httpRequest.body\n        if (!userInfo) {\n          return makeHttpError({\n            statusCode: 400,\n            errorMessage: 'Bad request. No POST body.'\n          })\n        }\n    \n        if (typeof httpRequest.body === 'string') {\n          try {\n            userInfo = JSON.parse(userInfo)\n          } catch {\n            return makeHttpError({\n              statusCode: 400,\n              errorMessage: 'Bad request. POST body must be valid JSON.'\n            })\n          }\n        }\n    \n        try { \n           \n          if (httpRequest.path == '/user/auth'){\n            \n            const user = makeUser(userInfo);\n            const result = await userQuery.auth(user);\n            return {\n                headers: {\n                  'Content-Type': 'application/json'\n                },\n                statusCode: 201,\n                data: JSON.stringify(result)\n              }\n          }\n          else if (httpRequest.path == '/user/verify'){\n            const result = await userQuery.verify(userInfo);\n            return {\n                headers: {\n                  'Content-Type': 'application/json'\n                },\n                statusCode: 201,\n                data: JSON.stringify(result)\n              }\n          }\n          else if (httpRequest.path == '/user/reset'){\n            const user = makeUser(userInfo);\n            const result = await userQuery.reset(user);\n            \n            return {\n                headers: {\n                  'Content-Type': 'application/json'\n                },\n                statusCode: 201,\n                data: JSON.stringify(result)\n              }\n          }\n          \n          else if (httpRequest.path == '/user/reset_password'){\n            const user = makeUser(userInfo);\n            const result = await userQuery.resetPassword(user);\n            \n            return {\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              statusCode: 201,\n              data: JSON.stringify(result)\n            }\n          }\n          else {\n            const user = makeUser(userInfo);\n            const result = await userQuery.add(user);\n            return {\n                headers: {\n                  'Content-Type': 'application/json'\n                },\n                statusCode: 201,\n                data: JSON.stringify(result)\n              }\n          }\n          \n          \n        } catch (e) {\n          return makeHttpError({\n            errorMessage: e.message,\n            statusCode:\n              e instanceof UniqueConstraintError\n                ? 409\n                : e instanceof InvalidPropertyError ||\n                  e instanceof RequiredParameterError\n                  ? 400\n                  : 500\n          })\n        }\n    }\n\n    async function deleteUser (httpRequest) {\n      //const { customer_id } = httpRequest.pathParams || {}\n      const { id } = httpRequest.pathParams || {}\n      try {\n        const result = await userQuery.deleteById({ id })\n  \n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        }\n      }\n      catch (e){\n        return makeHttpError({\n          errorMessage: e.message,\n          statusCode:\n            e instanceof UniqueConstraintError\n              ? 409\n              : e instanceof InvalidPropertyError ||\n                e instanceof RequiredParameterError\n                ? 400\n                : 500\n        })\n  \n      }\n      \n    }\n\n}"],"file":"user-endpoint.js"}