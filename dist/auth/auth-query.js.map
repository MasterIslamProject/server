{"version":3,"sources":["../../src/auth/auth-query.js"],"names":["require","config","jwt","bcrypt","makeAuthQuery","database","Object","freeze","findByHeader","checkToken","token","status","message","res","email","verify","split","process","env","JWT_SECRET","err","result","name","db","found","collection","findOne","n_query"],"mappings":";;;;;;;AACA;;AACA;;;;AAFAA,OAAO,CAAC,QAAD,CAAP,CAAkBC,MAAlB;;AAIA,MAAMC,GAAG,GAAGF,OAAO,CAAC,cAAD,CAAnB;;AACA,MAAMG,MAAM,GAAGH,OAAO,CAAC,UAAD,CAAtB;;AAEe,SAASI,aAAT,CAAuB;AAACC,EAAAA;AAAD,CAAvB,EAAkC;AAC7C,SAAOC,MAAM,CAACC,MAAP,CAAc;AACnBC,IAAAA,YADmB;AAEnBC,IAAAA;AAFmB,GAAd,CAAP;;AAKA,iBAAeD,YAAf,CAA4BE,KAA5B,EAAmC;AACjC,QAAIC,MAAM,GAAG,CAAb;AACA,QAAIC,OAAO,GAAG,KAAd;AACA,QAAIC,GAAG,GAAG,KAAV;AACA,QAAIC,KAAK,GAAG,EAAZ;AAEA,UAAMZ,GAAG,CAACa,MAAJ,CAAWL,KAAK,CAACM,KAAN,CAAY,GAAZ,EAAiB,CAAjB,CAAX,EAAgCC,OAAO,CAACC,GAAR,CAAYC,UAA5C,EAAwD,CAACC,GAAD,EAAKC,MAAL,KAAc;AAC1E,UAAGD,GAAH,EAAO;AACL;AACE,YAAGA,GAAG,CAACE,IAAJ,IAAY,mBAAf,EAAmC;AACjCX,UAAAA,MAAM,GAAG,GAAT;AACAC,UAAAA,OAAO,GAAG,eAAV;AACD,SAHD,MAIK,IAAGQ,GAAG,CAACE,IAAJ,IAAY,mBAAf,EAAoC;AACvCX,UAAAA,MAAM,GAAG,GAAT;AACAC,UAAAA,OAAO,GAAG,aAAV;AACD,SAHI,MAID;AACFD,UAAAA,MAAM,GAAG,GAAT;AACAC,UAAAA,OAAO,GAAG,aAAV;AACD;AACJ,OAdD,MAeI;AACAC,QAAAA,GAAG,GAAG,IAAN;AACAC,QAAAA,KAAK,GAAGO,MAAM,CAACP,KAAf;AACAH,QAAAA,MAAM,GAAG,GAAT;AACAC,QAAAA,OAAO,GAAG,aAAV;AACD;AACJ,KAtBK,CAAN;;AAwBA,QAAGC,GAAG,IAAI,IAAV,EAAe;AACb;AACA,YAAMU,EAAE,GAAG,MAAMlB,QAAjB;AACA,YAAMmB,KAAK,GAAG,MAAMD,EAAE,CACnBE,UADiB,CACN,OADM,EAEjBC,OAFiB,CAET;AAAEZ,QAAAA,KAAK,EAAEA;AAAT,OAFS,CAApB;;AAIE,UAAGU,KAAH,EAAS;AAEP,YAAGA,KAAK,CAACb,MAAN,IAAgB,WAAnB,EAA+B;AAC7BA,UAAAA,MAAM,GAAG,GAAT;AACAC,UAAAA,OAAO,GAAG,WAAV;AACD,SAHD,MAIK,IAAIY,KAAK,CAACG,OAAN,GAAgB,CAApB,EAAsB;AACzBhB,UAAAA,MAAM,GAAG,GAAT;AACAC,UAAAA,OAAO,GAAG,WAAV;AACD;AACF,OAVD,MAWK;AACHD,QAAAA,MAAM,GAAG,GAAT;AACAC,QAAAA,OAAO,GAAG,cAAV;AACD,OArBU,CAuBb;;;AACAC,MAAAA,GAAG,GAAG;AACJ,kBAAUF,MADN;AAEJ,mBAAWC;AAFP,OAAN;AAIA,aAAOC,GAAP;AACD,KA7BD,MA8BK;AACH;AACA;AACAA,MAAAA,GAAG,GAAG;AACJ,kBAAUF,MADN;AAEJ,mBAAWC;AAFP,OAAN;AAIA,aAAOC,GAAP;AACD;AAEF;;AAED,iBAAeJ,UAAf,CAA2BC,KAA3B,EAAkCI,KAAlC,EAAyC;AAEvC,QAAIH,MAAM,GAAG,CAAb;AACA,QAAIC,OAAO,GAAG,KAAd;AACA,QAAIC,GAAG,GAAG,KAAV;AAEA,UAAMX,GAAG,CAACa,MAAJ,CAAWL,KAAK,CAACM,KAAN,CAAY,GAAZ,EAAiB,CAAjB,CAAX,EAAgCC,OAAO,CAACC,GAAR,CAAYC,UAA5C,EAAwD,CAACC,GAAD,EAAKC,MAAL,KAAc;AAC1E,UAAGD,GAAH,EAAO;AACH,YAAGA,GAAG,CAACE,IAAJ,IAAY,mBAAf,EAAmC;AACjCX,UAAAA,MAAM,GAAG,GAAT;AACAC,UAAAA,OAAO,GAAG,eAAV;AACD,SAHD,MAII;AACFD,UAAAA,MAAM,GAAG,GAAT;AACAC,UAAAA,OAAO,GAAG,aAAV;AACD;AACJ,OATD,MAUI;AACF,YAAIS,MAAM,CAACP,KAAP,IAAgBA,KAApB,EAA2B;AACzBD,UAAAA,GAAG,GAAG,IAAN;AACAF,UAAAA,MAAM,GAAG,GAAT;AACAC,UAAAA,OAAO,GAAG,aAAV;AACD,SAJD,MAKK;AACHD,UAAAA,MAAM,GAAG,GAAT;AACAC,UAAAA,OAAO,GAAG,eAAV;AACD;AACF;AACF,KAtBK,CAAN;;AAwBA,QAAGC,GAAG,IAAI,IAAV,EAAe;AACb,YAAMU,EAAE,GAAG,MAAMlB,QAAjB;AACA,YAAMmB,KAAK,GAAG,MAAMD,EAAE,CACnBE,UADiB,CACN,OADM,EAEjBC,OAFiB,CAET;AAAEZ,QAAAA,KAAK,EAAEA;AAAT,OAFS,CAApB;;AAIE,UAAGU,KAAH,EAAS;AACP,YAAGA,KAAK,CAACb,MAAN,IAAgB,WAAnB,EAA+B;AAC7BA,UAAAA,MAAM,GAAG,GAAT;AACAC,UAAAA,OAAO,GAAG,WAAV;AACD,SAHD,MAIK,IAAIY,KAAK,CAACG,OAAN,GAAgB,CAApB,EAAsB;AACzBhB,UAAAA,MAAM,GAAG,GAAT;AACAC,UAAAA,OAAO,GAAG,WAAV;AACD;AACF,OATD,MAUK;AACHD,QAAAA,MAAM,GAAG,GAAT;AACAC,QAAAA,OAAO,GAAG,cAAV;AACD;AAEJ;;AAEDC,IAAAA,GAAG,GAAG;AACJ,gBAAUF,MADN;AAEJ,iBAAWC;AAFP,KAAN;AAIA,WAAOC,GAAP;AAED;AAGJ","sourcesContent":["require('dotenv').config();\nimport makeAuth from './auth'\nimport { UniqueConstraintError } from '../helpers/errors'\n\nconst jwt = require('jsonwebtoken');\nconst bcrypt = require('bcryptjs');\n\nexport default function makeAuthQuery({database}){\n    return Object.freeze({\n      findByHeader,\n      checkToken\n    });\n\n    async function findByHeader(token) {\n      let status = 0\n      let message = \"Nil\"\n      let res = false;\n      let email = \"\"\n\n      await jwt.verify(token.split(' ')[1], process.env.JWT_SECRET, (err,result)=>{\n        if(err){\n          // console.log(\"error discovered: \"+err.name)\n            if(err.name == \"TokenExpiredError\"){\n              status = 401\n              message = \"Token Expired\"\n            }\n            else if(err.name == \"JsonWebTokenError\") {\n              status = 401\n              message = \"Wrong Token\"\n            }\n            else{\n              status = 401\n              message = \"Token Error\"\n            }\n        }\n        else{\n            res = true;\n            email = result.email\n            status = 200\n            message = \"Token Valid\"\n          }\n      })\n\n      if(res == true){\n        // console.log(\"The email is: \"+email)\n        const db = await database\n        const found = await db\n          .collection('Users')\n          .findOne({ email: email })\n\n          if(found){\n\n            if(found.status == \"Suspended\"){\n              status = 403\n              message = \"Suspended\"\n            }\n            else if (found.n_query > 4){\n              status = 403\n              message = \"Suspended\"\n            }\n          }\n          else {\n            status = 401\n            message = \"Unauthorized\"\n          }\n\n        // console.log(\"True status: \"+status)\n        res = {\n          \"status\": status,\n          \"message\": message,\n        }\n        return res\n      }\n      else {\n        // console.log(\"false status: \"+status)\n        // console.log(\"false message: \"+message)\n        res = {\n          \"status\": status,\n          \"message\": message,\n        }\n        return res\n      }\n  \n    }\n  \n    async function checkToken (token, email) {\n\n      let status = 0\n      let message = \"Nil\"\n      let res = false;\n\n      await jwt.verify(token.split(' ')[1], process.env.JWT_SECRET, (err,result)=>{\n        if(err){\n            if(err.name == \"TokenExpiredError\"){\n              status = 401\n              message = \"Token Expired\"\n            }\n            else{\n              status = 401\n              message = \"Token Error\"\n            }\n        }\n        else{\n          if (result.email == email) {\n            res = true;\n            status = 200\n            message = \"Token Valid\"\n          }\n          else {\n            status = 400\n            message = \"Token Invalid\"\n          }\n        }\n      })\n\n      if(res == true){\n        const db = await database\n        const found = await db\n          .collection('Users')\n          .findOne({ email: email })\n  \n          if(found){\n            if(found.status == \"Suspended\"){\n              status = 403\n              message = \"Suspended\"\n            }\n            else if (found.n_query > 4){\n              status = 403\n              message = \"Suspended\"\n            }\n          }\n          else {\n            status = 401\n            message = \"Unauthorized\"\n          }\n          \n      }\n        \n      res = {\n        \"status\": status,\n        \"message\": message\n      }\n      return res\n      \n    }\n\n   \n}"],"file":"auth-query.js"}