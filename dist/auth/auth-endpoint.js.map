{"version":3,"sources":["../../src/auth/auth-endpoint.js"],"names":["makeAuthEndpointHandler","authQuery","handle","httpRequest","method","getAllHeaders","statusCode","errorMessage","email","queryParams","verifyemail","token","headers","authorization","res","status","data","JSON","stringify","undefined","result","checkToken","findByHeader"],"mappings":";;;;;;;AAAA;;AAKA;;AACA;;;;AAEe,SAASA,uBAAT,CAAiC;AAACC,EAAAA;AAAD,CAAjC,EAA6C;AAE1D,SAAO,eAAeC,MAAf,CAAsBC,WAAtB,EAAkC;AACvC,YAAQA,WAAW,CAACC,MAApB;AAEI,WAAK,KAAL;AACE,eAAOC,aAAa,CAACF,WAAD,CAApB;;AAEF,WAAK,MAAL;AACE,eAAOE,aAAa,CAACF,WAAD,CAApB;;AAEF,WAAK,QAAL;AACE,eAAOE,aAAa,CAACF,WAAD,CAApB;;AAEF;AACE,eAAO,wBAAc;AACnBG,UAAAA,UAAU,EAAE,GADO;AAEnBC,UAAAA,YAAY,EAAG,GAAEJ,WAAW,CAACC,MAAO;AAFjB,SAAd,CAAP;AAZN;AAiBD,GAlBD;;AAsBA,iBAAeC,aAAf,CAA8BF,WAA9B,EAA2C;AAEzC,UAAM;AAAEK,MAAAA;AAAF,QAAYL,WAAW,CAACM,WAAZ,IAA2B,EAA7C;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAkBP,WAAW,CAACM,WAAZ,IAA2B,EAAnD;AACA,QAAIE,KAAK,GAAGR,WAAW,CAACS,OAAZ,CAAoBC,aAAhC,CAJyC,CAMzC;;AAEA,QAAGH,WAAW,IAAIC,KAAK,IAAI,WAA3B,EAAuC;AAErC,YAAMG,GAAG,GAAG;AACV,kBAAU,GADA;AAEV,mBAAW;AAFD,OAAZ;AAIA,aAAO;AACLF,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT,SADJ;AAILN,QAAAA,UAAU,EAAEQ,GAAG,CAACC,MAJX;AAKLC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeJ,GAAf;AALD,OAAP;AAOD,KAbD,MAeK;AAEH,UAAIH,KAAK,GAAGR,WAAW,CAACS,OAAZ,CAAoBC,aAAhC;;AAEA,UAAGF,KAAK,IAAIQ,SAAZ,EAAsB;AACpB,cAAML,GAAG,GAAG;AACV,oBAAU,GADA;AAEV,qBAAW;AAFD,SAAZ;AAIA,eAAO;AACLF,UAAAA,OAAO,EAAE;AACP,4BAAgB;AADT,WADJ;AAILN,UAAAA,UAAU,EAAEQ,GAAG,CAACC,MAJX;AAKLC,UAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeJ,GAAf;AALD,SAAP;AAOD,OAZD,MAaK;AACH,YAAIN,KAAK,KAAKW,SAAd,EAAyB;AACvB,gBAAMC,MAAM,GAAG,MAAMnB,SAAS,CAACoB,UAAV,CAAqBV,KAArB,EAA4BH,KAA5B,CAArB;AACA,iBAAO;AACLI,YAAAA,OAAO,EAAE;AACP,8BAAgB;AADT,aADJ;AAILN,YAAAA,UAAU,EAAE,GAJP;AAKLU,YAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeE,MAAf;AALD,WAAP;AAQD,SAVD,MAWK;AACH,gBAAMA,MAAM,GAAG,MAAMnB,SAAS,CAACqB,YAAV,CAAuBX,KAAvB,CAArB;AACA,iBAAO;AACLC,YAAAA,OAAO,EAAE;AACP,8BAAgB;AADT,aADJ;AAILN,YAAAA,UAAU,EAAEc,MAAM,CAACL,MAJd;AAKLC,YAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeE,MAAf;AALD,WAAP;AAQD;AACF;AAEF;AAEF;AAEF","sourcesContent":["import {\n  UniqueConstraintError,\n  InvalidPropertyError,\n  RequiredParameterError\n} from '../helpers/errors';\nimport makeHttpError from '../helpers/http-error';\nimport makeAuth from './auth';\n\nexport default function makeAuthEndpointHandler({authQuery}){\n \n  return async function handle(httpRequest){\n    switch (httpRequest.method) {\n        \n        case 'GET':\n          return getAllHeaders(httpRequest)\n\n        case 'POST':\n          return getAllHeaders(httpRequest)\n\n        case 'DELETE':\n          return getAllHeaders(httpRequest)\n\n        default:\n          return makeHttpError({\n            statusCode: 405,\n            errorMessage: `${httpRequest.method} method not allowed.`\n          })\n    }\n  }\n  \n\n\n  async function getAllHeaders (httpRequest) { \n    \n    const { email } = httpRequest.queryParams || {} \n    const { verifyemail } = httpRequest.queryParams || {} \n    var token = httpRequest.headers.authorization\n\n    // console.log(\"The token: \"+token)\n\n    if(verifyemail || token == \"Bearer -1\"){\n      \n      const res = {\n        \"status\": 200,\n        \"message\": \"Token not needed\",\n      }\n      return {\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        statusCode: res.status,\n        data: JSON.stringify(res)\n      }\n    }\n    \n    else {\n\n      var token = httpRequest.headers.authorization\n\n      if(token == undefined){\n        const res = {\n          \"status\": 500,\n          \"message\": \"No token supplied\",\n        }\n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: res.status,\n          data: JSON.stringify(res)\n        }\n      }\n      else {\n        if (email !== undefined ){\n          const result = await authQuery.checkToken(token, email)\n          return {\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            statusCode: 200,\n            data: JSON.stringify(result)\n          }\n\n        }\n        else {\n          const result = await authQuery.findByHeader(token);\n          return {\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            statusCode: result.status,\n            data: JSON.stringify(result)\n          }\n\n        }\n      }\n        \n    }\n\n  }\n\n}"],"file":"auth-endpoint.js"}