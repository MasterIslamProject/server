{"version":3,"sources":["../../src/activities/activities-query.js"],"names":["makeActivitiesQuery","database","Object","freeze","add","findById","findByCategory","findByPassword","findByCatnPass","getActivities","deleteByPassword","deleteById","update","max","before","after","db","query","_id","$lt","makeId","$gt","collection","find","limit","Number","toArray","map","documentToActivities","activitiesId","activities","date","Date","toISOString","result","ops","insertOne","catch","mongoError","errorCode","message","split","_","mongoIndex","UniqueConstraintError","status","id","newSet","$set","category","topic","comment","banner","password","updateOne","upsert","found","findOne","deleteMany","success","n","deleteOne","doc"],"mappings":"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","sourcesContent":["import makeActivities from './activities'\nimport { UniqueConstraintError } from '../helpers/errors'\n\nexport default function makeActivitiesQuery({database}){\n    return Object.freeze({\n        add,\n        findById,\n        findByCategory,\n        findByPassword,\n        findByCatnPass,\n        getActivities,\n        deleteByPassword,\n        deleteById,\n        update\n    });\n\n    async function getActivities ({ max = 100, before, after } = {}) {\n        const db = await database;\n        const query = {}\n        if (before || after) {\n        query._id = {}\n        query._id = before ? { ...query._id, $lt: db.makeId(before) } : query._id\n        query._id = after ? { ...query._id, $gt: db.makeId(after) } : query._id\n        }\n\n        return (await db\n        .collection('Activities')\n        .find(query)\n        .limit(Number(max))\n        .toArray()).map(documentToActivities)\n    }\n\n\n    async function add ({ activitiesId, ...activities }) {\n        let date = new Date()\n        activities.date = date.toISOString()\n\n        const db = await database\n        if (activitiesId) {\n          activities._id = db.makeId(activitiesId)\n        }\n        const { result, ops } = await db\n          .collection('Activities')\n          .insertOne(activities)\n          .catch(mongoError => {\n            const [errorCode] = mongoError.message.split(' ')\n            if (errorCode === 'E11000') {\n              const [_, mongoIndex] = mongoError.message.split(':')[2].split(' ')\n              throw new UniqueConstraintError(\n                \n              )\n            }\n            throw mongoError\n          })\n\n        if (result){\n          return {\n            status: \"Success\",\n            message: \"Upload successful\"\n          }\n        }\n        else {\n          return {\n            status: \"Error\",\n            message: \"Upload not successful\"\n          }\n        }\n        // return {\n        //     success: result.ok === 1,\n        //     created: documentToActivities(ops[0])\n        // }\n    }\n\n  async function update ({ id, ...activities }) {\n      \n      const db = await database\n      const query = {\n        _id: db.makeId(id)\n      }\n      \n      const newSet = {\n        $set : {\n          category: activities.category,\n          topic: activities.topic,\n          comment: activities.comment,\n          banner: activities.banner,\n          password: activities.password\n        } \n      }\n      /*if (id) {\n        _id = db.makeId(id)\n      }*/\n      const { result } = await db\n        .collection('Activities')\n        .updateOne(query, newSet, {upsert:true})\n\n        if (result) {\n          return {\n            status: \"success\",\n            message: \"Updated successfully\"\n          }\n        }\n        else {\n          return {\n            status: \"error\",\n            message: \"Error updating\"\n          }\n        }\n      \n  }\n\n    \n  async function findById ({ id }) {\n    const db = await database\n    const found = await db\n      .collection('Activities')\n      .findOne({ _id: db.makeId(id) })\n    if (found) {\n      return documentToActivities(found)\n    }\n    return {}\n  }\n\n  async function findByCategory({ category }) {\n    const db = await database;\n    \n    return (await db\n      .collection('Activities')\n      .find({ category: category })\n      .toArray()).map(documentToActivities)\n  }\n\n  async function findByPassword({ password }) {\n    const db = await database;\n    \n    return (await db\n      .collection('Activities')\n      .find({ password: password })\n      .toArray()).map(documentToActivities)\n  }\n\n  async function findByCatnPass({ category, password }) {\n    const db = await database;\n    \n    return (await db\n      .collection('Activities')\n      .find({ category: category, password: password })\n      .toArray()).map(documentToActivities)\n  }\n\n  async function deleteByPassword ({ password }) {\n    const db = await database\n\n    const { result } = await db.collection('Activities').deleteMany({\"password\": password})\n    return {\n      success: result.n\n    }\n  }  \n\n  async function deleteById ({ id }) {\n    const db = await database\n\n    const { result } = await db.collection('Activities').deleteOne({\"_id\": db.makeId(id)})\n    if (result.n > 0){\n      return {\n        status: \"Success\"\n      }\n    }\n    else {\n      return {\n        status: \"Error\"\n      }\n    }\n  }\n\n  function documentToActivities ({ _id: id, ...doc }) {\n    return makeActivities({ id, ...doc })\n  }\n}"],"file":"activities-query.js"}