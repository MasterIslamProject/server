{"version":3,"sources":["../../src/activities/activities-endpoint.js"],"names":["makeActivitiesEndpointHandler","activitiesQuery","handle","httpRequest","method","postActivities","getActivities","updateActivities","deleteActivities","statusCode","errorMessage","id","queryParams","category","password","cat","pass","max","before","after","undefined","result","findByCatnPass","headers","data","JSON","stringify","findByCategory","findByPassword","findById","activitiesInfo","body","parse","activities","add","e","message","UniqueConstraintError","InvalidPropertyError","RequiredParameterError","update","pathParams","deleteByPassword","deleteById"],"mappings":";;;;;;;AAAA;;AAKE;;AACA;;;;AAEa,SAASA,6BAAT,CAAuC;AAACC,EAAAA;AAAD,CAAvC,EAAyD;AACpE,SAAO,eAAeC,MAAf,CAAsBC,WAAtB,EAAkC;AACrC,YAAQA,WAAW,CAACC,MAApB;AACI,WAAK,MAAL;AACE,eAAOC,cAAc,CAACF,WAAD,CAArB;;AAEF,WAAK,KAAL;AACE,eAAOG,aAAa,CAACH,WAAD,CAApB;;AAEF,WAAK,KAAL;AACI,eAAOI,gBAAgB,CAACJ,WAAD,CAAvB;;AAEJ,WAAK,QAAL;AACE,eAAOK,gBAAgB,CAACL,WAAD,CAAvB;;AAEF;AACE,eAAO,wBAAc;AACnBM,UAAAA,UAAU,EAAE,GADO;AAEnBC,UAAAA,YAAY,EAAG,GAAEP,WAAW,CAACC,MAAO;AAFjB,SAAd,CAAP;AAdN;AAmBH,GApBD;;AAsBA,iBAAeE,aAAf,CAA8BH,WAA9B,EAA2C;AAEzC,UAAM;AAAEQ,MAAAA;AAAF,QAASR,WAAW,CAACS,WAAZ,IAA2B,EAA1C;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAeV,WAAW,CAACS,WAAZ,IAA2B,EAAhD;AACA,UAAM;AAAEE,MAAAA;AAAF,QAAeX,WAAW,CAACS,WAAZ,IAA2B,EAAhD;AACA,UAAM;AAAEG,MAAAA,GAAF;AAAOC,MAAAA;AAAP,QAAgBb,WAAW,CAACS,WAAZ,IAA2B,EAAjD,CALyC,CAKW;;AACpD,UAAM;AAAEK,MAAAA,GAAF;AAAOC,MAAAA,MAAP;AAAeC,MAAAA;AAAf,QAAyBhB,WAAW,CAACS,WAAZ,IAA2B,EAA1D;;AAEA,QAAIG,GAAG,KAAKK,SAAR,IAAqBJ,IAAI,KAAKI,SAAlC,EAA4C;AAE1C,YAAMP,QAAQ,GAAGE,GAAjB;AACA,YAAMD,QAAQ,GAAGE,IAAjB;AAEA,YAAMK,MAAM,GAAG,MAAMpB,eAAe,CAACqB,cAAhB,CAA+B;AAAET,QAAAA,QAAF;AAAYC,QAAAA;AAAZ,OAA/B,CAArB;AAEA,aAAO;AACLS,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT,SADJ;AAILd,QAAAA,UAAU,EAAE,GAJP;AAKLe,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,MAAf;AALD,OAAP;AAQD,KAfD,MAgBK,IAAIR,QAAQ,KAAKO,SAAjB,EAA4B;AAE/B,YAAMC,MAAM,GAAG,MAAMpB,eAAe,CAAC0B,cAAhB,CAA+B;AAAEd,QAAAA;AAAF,OAA/B,CAArB;AAEA,aAAO;AACLU,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT,SADJ;AAILd,QAAAA,UAAU,EAAE,GAJP;AAKLe,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,MAAf;AALD,OAAP;AAQD,KAZI,MAaA,IAAIP,QAAQ,KAAKM,SAAjB,EAA4B;AAE/B,YAAMC,MAAM,GAAG,MAAMpB,eAAe,CAAC2B,cAAhB,CAA+B;AAAEf,QAAAA;AAAF,OAA/B,CAArB;AAEA,aAAO;AACLU,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT,SADJ;AAILd,QAAAA,UAAU,EAAE,GAJP;AAKLe,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,MAAf;AALD,OAAP;AAQD,KAZI,MAcA,IAAIV,EAAE,KAAKS,SAAX,EAAsB;AAEzB,YAAMC,MAAM,GAAG,MAAMpB,eAAe,CAAC4B,QAAhB,CAAyB;AAAElB,QAAAA;AAAF,OAAzB,CAArB;AAEA,aAAO;AACLY,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT,SADJ;AAILd,QAAAA,UAAU,EAAE,GAJP;AAKLe,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,MAAf;AALD,OAAP;AAQD,KAZI,MAaA;AACH,YAAMA,MAAM,GAAG,MAAMpB,eAAe,CAACK,aAAhB,CAA8B;AAAEW,QAAAA,GAAF;AAAOC,QAAAA,MAAP;AAAeC,QAAAA;AAAf,OAA9B,CAArB;AAEA,aAAO;AACLI,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT,SADJ;AAILd,QAAAA,UAAU,EAAE,GAJP;AAKLe,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,MAAf;AALD,OAAP;AAQD;AAGF;;AAGD,iBAAehB,cAAf,CAA+BF,WAA/B,EAA4C;AACxC,QAAI2B,cAAc,GAAG3B,WAAW,CAAC4B,IAAjC;;AACA,QAAI,CAACD,cAAL,EAAqB;AACnB,aAAO,wBAAc;AACnBrB,QAAAA,UAAU,EAAE,GADO;AAEnBC,QAAAA,YAAY,EAAE;AAFK,OAAd,CAAP;AAID;;AAED,QAAI,OAAOP,WAAW,CAAC4B,IAAnB,KAA4B,QAAhC,EAA0C;AACxC,UAAI;AACFD,QAAAA,cAAc,GAAGL,IAAI,CAACO,KAAL,CAAWF,cAAX,CAAjB;AACD,OAFD,CAEE,MAAM;AACN,eAAO,wBAAc;AACnBrB,UAAAA,UAAU,EAAE,GADO;AAEnBC,UAAAA,YAAY,EAAE;AAFK,SAAd,CAAP;AAID;AACF;;AAED,QAAI;AACF,YAAMuB,UAAU,GAAG,yBAAeH,cAAf,CAAnB;AACA,YAAMT,MAAM,GAAG,MAAMpB,eAAe,CAACiC,GAAhB,CAAoBD,UAApB,CAArB;AACA,aAAO;AACLV,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT,SADJ;AAILd,QAAAA,UAAU,EAAE,GAJP;AAKLe,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,MAAf;AALD,OAAP;AAOD,KAVD,CAUE,OAAOc,CAAP,EAAU;AACV,aAAO,wBAAc;AACnBzB,QAAAA,YAAY,EAAEyB,CAAC,CAACC,OADG;AAEnB3B,QAAAA,UAAU,EACR0B,CAAC,YAAYE,6BAAb,GACI,GADJ,GAEIF,CAAC,YAAYG,4BAAb,IACAH,CAAC,YAAYI,8BADb,GAEE,GAFF,GAGE;AARW,OAAd,CAAP;AAUD;AACJ;;AAGD,iBAAehC,gBAAf,CAAiCJ,WAAjC,EAA8C;AAC1C,QAAI2B,cAAc,GAAG3B,WAAW,CAAC4B,IAAjC;;AACA,QAAI,CAACD,cAAL,EAAqB;AACnB,aAAO,wBAAc;AACnBrB,QAAAA,UAAU,EAAE,GADO;AAEnBC,QAAAA,YAAY,EAAE;AAFK,OAAd,CAAP;AAID;;AAED,QAAI,OAAOP,WAAW,CAAC4B,IAAnB,KAA4B,QAAhC,EAA0C;AACxC,UAAI;AACFD,QAAAA,cAAc,GAAGL,IAAI,CAACO,KAAL,CAAWF,cAAX,CAAjB;AACD,OAFD,CAEE,MAAM;AACN,eAAO,wBAAc;AACnBrB,UAAAA,UAAU,EAAE,GADO;AAEnBC,UAAAA,YAAY,EAAE;AAFK,SAAd,CAAP;AAID;AACF;;AAED,QAAI;AACF,YAAMuB,UAAU,GAAG,yBAAeH,cAAf,CAAnB;AACA,YAAMT,MAAM,GAAG,MAAMpB,eAAe,CAACuC,MAAhB,CAAuBP,UAAvB,CAArB;AACA,aAAO;AACLV,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT,SADJ;AAILd,QAAAA,UAAU,EAAE,GAJP;AAKLe,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,MAAf;AALD,OAAP;AAOD,KAVD,CAUE,OAAOc,CAAP,EAAU;AACV,aAAO,wBAAc;AACnBzB,QAAAA,YAAY,EAAEyB,CAAC,CAACC,OADG;AAEnB3B,QAAAA,UAAU,EACR0B,CAAC,YAAYE,6BAAb,GACI,GADJ,GAEIF,CAAC,YAAYG,4BAAb,IACAH,CAAC,YAAYI,8BADb,GAEE,GAFF,GAGE;AARW,OAAd,CAAP;AAUD;AACJ;;AAED,iBAAe/B,gBAAf,CAAiCL,WAAjC,EAA8C;AAC5C,UAAM;AAAEQ,MAAAA;AAAF,QAASR,WAAW,CAACsC,UAAZ,IAA0B,EAAzC;AACA,UAAM;AAAE3B,MAAAA;AAAF,QAAeX,WAAW,CAACsC,UAAZ,IAA0B,EAA/C;;AAEA,QAAI3B,QAAQ,KAAKM,SAAjB,EAA4B;AAC1B,UAAI;AACF,cAAMC,MAAM,GAAG,MAAMpB,eAAe,CAACyC,gBAAhB,CAAiC;AAAE5B,UAAAA;AAAF,SAAjC,CAArB;AAEA,eAAO;AACLS,UAAAA,OAAO,EAAE;AACP,4BAAgB;AADT,WADJ;AAILd,UAAAA,UAAU,EAAE,GAJP;AAKLe,UAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,MAAf;AALD,SAAP;AAOD,OAVD,CAWA,OAAOc,CAAP,EAAS;AACP,eAAO,wBAAc;AACnBzB,UAAAA,YAAY,EAAEyB,CAAC,CAACC,OADG;AAEnB3B,UAAAA,UAAU,EACR0B,CAAC,YAAYE,6BAAb,GACI,GADJ,GAEIF,CAAC,YAAYG,4BAAb,IACAH,CAAC,YAAYI,8BADb,GAEE,GAFF,GAGE;AARW,SAAd,CAAP;AAWD;AACF,KAzBD,MA0BK;AACH,UAAI;AACF,cAAMlB,MAAM,GAAG,MAAMpB,eAAe,CAAC0C,UAAhB,CAA2B;AAAEhC,UAAAA;AAAF,SAA3B,CAArB;AACA,eAAO;AACLY,UAAAA,OAAO,EAAE;AACP,4BAAgB;AADT,WADJ;AAILd,UAAAA,UAAU,EAAE,GAJP;AAKLe,UAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,MAAf;AALD,SAAP;AAOD,OATD,CAUA,OAAOc,CAAP,EAAS;AACP,eAAO,wBAAc;AACnBzB,UAAAA,YAAY,EAAEyB,CAAC,CAACC,OADG;AAEnB3B,UAAAA,UAAU,EACR0B,CAAC,YAAYE,6BAAb,GACI,GADJ,GAEIF,CAAC,YAAYG,4BAAb,IACAH,CAAC,YAAYI,8BADb,GAEE,GAFF,GAGE;AARW,SAAd,CAAP;AAWD;AACF;AAEF;AAGJ","sourcesContent":["import {\n    UniqueConstraintError,\n    InvalidPropertyError,\n    RequiredParameterError\n  } from '../helpers/errors';\n  import makeHttpError from '../helpers/http-error';\n  import makeActivities from './activities';\n\nexport default function makeActivitiesEndpointHandler({activitiesQuery}){\n    return async function handle(httpRequest){\n        switch (httpRequest.method) {\n            case 'POST':\n              return postActivities(httpRequest)\n      \n            case 'GET':\n              return getActivities(httpRequest)\n\n            case 'PUT':\n                return updateActivities(httpRequest)\n      \n            case 'DELETE':\n              return deleteActivities(httpRequest)\n\n            default:\n              return makeHttpError({\n                statusCode: 405,\n                errorMessage: `${httpRequest.method} method not allowed.`\n              })\n        }\n    }\n\n    async function getActivities (httpRequest) {\n\n      const { id } = httpRequest.queryParams || {}\n      const { category } = httpRequest.queryParams || {}\n      const { password } = httpRequest.queryParams || {}\n      const { cat, pass } = httpRequest.queryParams || {} //category and password\n      const { max, before, after } = httpRequest.queryParams || {}\n\n      if (cat !== undefined && pass !== undefined){\n\n        const category = cat;\n        const password = pass;\n\n        const result = await activitiesQuery.findByCatnPass({ category, password })\n\n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        }\n\n      }\n      else if (category !== undefined ){\n        \n        const result = await activitiesQuery.findByCategory({ category })\n\n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        }\n\n      }\n      else if (password !== undefined ){\n        \n        const result = await activitiesQuery.findByPassword({ category })\n\n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        }\n\n      }\n      \n      else if (id !== undefined ){\n        \n        const result = await activitiesQuery.findById({ id })\n\n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        }\n\n      }\n      else {\n        const result = await activitiesQuery.getActivities({ max, before, after })\n\n        return {\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          statusCode: 200,\n          data: JSON.stringify(result)\n        }\n        \n      }\n\n        \n    }\n\n\n    async function postActivities (httpRequest) {\n        let activitiesInfo = httpRequest.body\n        if (!activitiesInfo) {\n          return makeHttpError({\n            statusCode: 400,\n            errorMessage: 'Bad request. No POST body.'\n          })\n        }\n    \n        if (typeof httpRequest.body === 'string') {\n          try {\n            activitiesInfo = JSON.parse(activitiesInfo)\n          } catch {\n            return makeHttpError({\n              statusCode: 400,\n              errorMessage: 'Bad request. POST body must be valid JSON.'\n            })\n          }\n        }\n    \n        try {\n          const activities = makeActivities(activitiesInfo)\n          const result = await activitiesQuery.add(activities)\n          return {\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            statusCode: 201,\n            data: JSON.stringify(result)\n          }\n        } catch (e) {\n          return makeHttpError({\n            errorMessage: e.message,\n            statusCode:\n              e instanceof UniqueConstraintError\n                ? 409\n                : e instanceof InvalidPropertyError ||\n                  e instanceof RequiredParameterError\n                  ? 400\n                  : 500\n          })\n        }\n    }\n\n\n    async function updateActivities (httpRequest) {\n        let activitiesInfo = httpRequest.body\n        if (!activitiesInfo) {\n          return makeHttpError({\n            statusCode: 400,\n            errorMessage: 'Bad request. No POST body.'\n          })\n        }\n    \n        if (typeof httpRequest.body === 'string') {\n          try {\n            activitiesInfo = JSON.parse(activitiesInfo)\n          } catch {\n            return makeHttpError({\n              statusCode: 400,\n              errorMessage: 'Bad request. POST body must be valid JSON.'\n            })\n          }\n        }\n    \n        try {\n          const activities = makeActivities(activitiesInfo)\n          const result = await activitiesQuery.update(activities)\n          return {\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            statusCode: 201,\n            data: JSON.stringify(result)\n          }\n        } catch (e) {\n          return makeHttpError({\n            errorMessage: e.message,\n            statusCode:\n              e instanceof UniqueConstraintError\n                ? 409\n                : e instanceof InvalidPropertyError ||\n                  e instanceof RequiredParameterError\n                  ? 400\n                  : 500\n          })\n        }\n    }\n\n    async function deleteActivities (httpRequest) {\n      const { id } = httpRequest.pathParams || {}\n      const { password } = httpRequest.pathParams || {}\n  \n      if (password !== undefined ){\n        try {\n          const result = await activitiesQuery.deleteByPassword({ password })\n  \n          return {\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            statusCode: 200,\n            data: JSON.stringify(result)  \n          }\n        }\n        catch (e){\n          return makeHttpError({\n            errorMessage: e.message,\n            statusCode:\n              e instanceof UniqueConstraintError\n                ? 409\n                : e instanceof InvalidPropertyError ||\n                  e instanceof RequiredParameterError\n                  ? 400\n                  : 500\n          })\n  \n        }\n      }\n      else {\n        try {\n          const result = await activitiesQuery.deleteById({ id })\n          return {\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            statusCode: 200,\n            data: JSON.stringify(result)\n          }\n        }\n        catch (e){\n          return makeHttpError({\n            errorMessage: e.message,\n            statusCode:\n              e instanceof UniqueConstraintError\n                ? 409\n                : e instanceof InvalidPropertyError ||\n                  e instanceof RequiredParameterError\n                  ? 400\n                  : 500\n          })\n  \n        }\n      }\n      \n    }\n  \n\n}"],"file":"activities-endpoint.js"}